Grammar

    0 $accept: program $end

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body DOT

    2 declares: declares VAR id_list COLON type SEMICOLON
    3         | /* empty */

    4 subs: subs sub
    5     | /* empty */

    6 sub: FUNCTION id LP params RP COLON stdtype SEMICOLON declares program_body SEMICOLON
    7    | PROCEDURE id LP params RP SEMICOLON declares program_body SEMICOLON
    8    | PROCEDURE id SEMICOLON declares program_body SEMICOLON

    9 params: params SEMICOLON id_list COLON type
   10       | id_list COLON type

   11 program_body: BGIN stmts END

   12 stmts: stmt SEMICOLON stmts
   13      | stmt
   14      | /* empty */

   15 stmt: var ASSIGN exp
   16     | call
   17     | IF exp THEN stmt ELSE stmt
   18     | IF exp THEN stmt
   19     | WHILE exp DO stmt
   20     | BGIN stmts END
   21     | BREAK

   22 exp_list: exp_list COMMA exp
   23         | exp

   24 exp: exp ADD exp
   25    | exp SUB exp
   26    | SUB exp
   27    | exp MUL exp
   28    | exp DIV exp
   29    | exp MOD exp
   30    | LP exp RP
   31    | exp AND exp
   32    | exp OR exp
   33    | NOT exp
   34    | exp GT exp
   35    | exp LT exp
   36    | exp GTE exp
   37    | exp LTE exp
   38    | exp EQ exp
   39    | exp NEQ exp
   40    | call
   41    | id
   42    | num
   43    | boolexp

   44 call: syscall
   45     | usercall

   46 syscall: READ LP exp_list RP
   47        | WRITE LP exp_list RP

   48 usercall: id LP exp_list RP

   49 var: id
   50    | id LSQ exp RSQ

   51 type: stdtype
   52     | ARRAY LSQ int DOTDOT int RSQ OF stdtype

   53 stdtype: TREAL
   54        | TINT

   55 id_list: id_list COMMA id
   56        | id

   57 boolexp: TRUE
   58        | FALSE

   59 id: ID

   60 num: int
   61    | REAL

   62 int: INT


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 1
FUNCTION (259) 6
PROCEDURE (260) 7 8
VAR (261) 2
IF (262) 17 18
ELSE (263) 17
THEN (264) 17 18
WHILE (265) 19
DO (266) 19
BGIN (267) 11 20
END (268) 11 20
SEMICOLON (269) 1 2 6 7 8 9 12
COMMA (270) 22 55
COLON (271) 2 6 9 10
DOT (272) 1
DOTDOT (273) 52
LP (274) 1 6 7 30 46 47 48
RP (275) 1 6 7 30 46 47 48
LSQ (276) 50 52
RSQ (277) 50 52
READ (278) 46
WRITE (279) 47
ARRAY (280) 52
TINT (281) 54
TREAL (282) 53
OF (283) 52
ASSIGN (284) 15
ADD (285) 24
SUB (286) 25 26
MUL (287) 27
DIV (288) 28
MOD (289) 29
AND (290) 31
OR (291) 32
NOT (292) 33
GT (293) 34
LT (294) 35
EQ (295) 38
NEQ (296) 39
GTE (297) 36
LTE (298) 37
INT (299) 62
REAL (300) 61
ID (301) 59
TRUE (302) 57
FALSE (303) 58
BREAK (304) 21
UMINUS (305)


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1, on right: 0
declares (53)
    on left: 2 3, on right: 1 2 6 7 8
subs (54)
    on left: 4 5, on right: 1 4
sub (55)
    on left: 6 7 8, on right: 4
params (56)
    on left: 9 10, on right: 6 7 9
program_body (57)
    on left: 11, on right: 1 6 7 8
stmts (58)
    on left: 12 13 14, on right: 11 12 20
stmt (59)
    on left: 15 16 17 18 19 20 21, on right: 12 13 17 18 19
exp_list (60)
    on left: 22 23, on right: 22 46 47 48
exp (61)
    on left: 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
    42 43, on right: 15 17 18 19 22 23 24 25 26 27 28 29 30 31 32 33
    34 35 36 37 38 39 50
call (62)
    on left: 44 45, on right: 16 40
syscall (63)
    on left: 46 47, on right: 44
usercall (64)
    on left: 48, on right: 45
var (65)
    on left: 49 50, on right: 15
type (66)
    on left: 51 52, on right: 2 9 10
stdtype (67)
    on left: 53 54, on right: 6 51 52
id_list (68)
    on left: 55 56, on right: 1 2 9 10 55
boolexp (69)
    on left: 57 58, on right: 43
id (70)
    on left: 59, on right: 1 6 7 8 41 48 49 50 55 56
num (71)
    on left: 60 61, on right: 42
int (72)
    on left: 62, on right: 52 60


state 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


state 1

    1 program: PROGRAM . id LP id_list RP SEMICOLON declares subs program_body DOT

    ID  shift, and go to state 3

    id  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

   59 id: ID .

    $default  reduce using rule 59 (id)


state 4

    1 program: PROGRAM id . LP id_list RP SEMICOLON declares subs program_body DOT

    LP  shift, and go to state 6


state 5

    0 $accept: program $end .

    $default  accept


state 6

    1 program: PROGRAM id LP . id_list RP SEMICOLON declares subs program_body DOT

    ID  shift, and go to state 3

    id_list  go to state 7
    id       go to state 8


state 7

    1 program: PROGRAM id LP id_list . RP SEMICOLON declares subs program_body DOT
   55 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    RP     shift, and go to state 10


state 8

   56 id_list: id .

    $default  reduce using rule 56 (id_list)


state 9

   55 id_list: id_list COMMA . id

    ID  shift, and go to state 3

    id  go to state 11


state 10

    1 program: PROGRAM id LP id_list RP . SEMICOLON declares subs program_body DOT

    SEMICOLON  shift, and go to state 12


state 11

   55 id_list: id_list COMMA id .

    $default  reduce using rule 55 (id_list)


state 12

    1 program: PROGRAM id LP id_list RP SEMICOLON . declares subs program_body DOT

    $default  reduce using rule 3 (declares)

    declares  go to state 13


state 13

    1 program: PROGRAM id LP id_list RP SEMICOLON declares . subs program_body DOT
    2 declares: declares . VAR id_list COLON type SEMICOLON

    VAR  shift, and go to state 14

    $default  reduce using rule 5 (subs)

    subs  go to state 15


state 14

    2 declares: declares VAR . id_list COLON type SEMICOLON

    ID  shift, and go to state 3

    id_list  go to state 16
    id       go to state 8


state 15

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs . program_body DOT
    4 subs: subs . sub

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BGIN       shift, and go to state 19

    sub           go to state 20
    program_body  go to state 21


state 16

    2 declares: declares VAR id_list . COLON type SEMICOLON
   55 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 22


state 17

    6 sub: FUNCTION . id LP params RP COLON stdtype SEMICOLON declares program_body SEMICOLON

    ID  shift, and go to state 3

    id  go to state 23


state 18

    7 sub: PROCEDURE . id LP params RP SEMICOLON declares program_body SEMICOLON
    8    | PROCEDURE . id SEMICOLON declares program_body SEMICOLON

    ID  shift, and go to state 3

    id  go to state 24


state 19

   11 program_body: BGIN . stmts END

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    $default  reduce using rule 14 (stmts)

    stmts     go to state 31
    stmt      go to state 32
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 20

    4 subs: subs sub .

    $default  reduce using rule 4 (subs)


state 21

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body . DOT

    DOT  shift, and go to state 38


state 22

    2 declares: declares VAR id_list COLON . type SEMICOLON

    ARRAY  shift, and go to state 39
    TINT   shift, and go to state 40
    TREAL  shift, and go to state 41

    type     go to state 42
    stdtype  go to state 43


state 23

    6 sub: FUNCTION id . LP params RP COLON stdtype SEMICOLON declares program_body SEMICOLON

    LP  shift, and go to state 44


state 24

    7 sub: PROCEDURE id . LP params RP SEMICOLON declares program_body SEMICOLON
    8    | PROCEDURE id . SEMICOLON declares program_body SEMICOLON

    SEMICOLON  shift, and go to state 45
    LP         shift, and go to state 46


state 25

   17 stmt: IF . exp THEN stmt ELSE stmt
   18     | IF . exp THEN stmt

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 54
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 26

   19 stmt: WHILE . exp DO stmt

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 60
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 27

   20 stmt: BGIN . stmts END

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    $default  reduce using rule 14 (stmts)

    stmts     go to state 61
    stmt      go to state 32
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 28

   46 syscall: READ . LP exp_list RP

    LP  shift, and go to state 62


state 29

   47 syscall: WRITE . LP exp_list RP

    LP  shift, and go to state 63


state 30

   21 stmt: BREAK .

    $default  reduce using rule 21 (stmt)


state 31

   11 program_body: BGIN stmts . END

    END  shift, and go to state 64


state 32

   12 stmts: stmt . SEMICOLON stmts
   13      | stmt .

    SEMICOLON  shift, and go to state 65

    $default  reduce using rule 13 (stmts)


state 33

   16 stmt: call .

    $default  reduce using rule 16 (stmt)


state 34

   44 call: syscall .

    $default  reduce using rule 44 (call)


state 35

   45 call: usercall .

    $default  reduce using rule 45 (call)


state 36

   15 stmt: var . ASSIGN exp

    ASSIGN  shift, and go to state 66


state 37

   48 usercall: id . LP exp_list RP
   49 var: id .
   50    | id . LSQ exp RSQ

    LP   shift, and go to state 67
    LSQ  shift, and go to state 68

    $default  reduce using rule 49 (var)


state 38

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body DOT .

    $default  reduce using rule 1 (program)


state 39

   52 type: ARRAY . LSQ int DOTDOT int RSQ OF stdtype

    LSQ  shift, and go to state 69


state 40

   54 stdtype: TINT .

    $default  reduce using rule 54 (stdtype)


state 41

   53 stdtype: TREAL .

    $default  reduce using rule 53 (stdtype)


state 42

    2 declares: declares VAR id_list COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 70


state 43

   51 type: stdtype .

    $default  reduce using rule 51 (type)


state 44

    6 sub: FUNCTION id LP . params RP COLON stdtype SEMICOLON declares program_body SEMICOLON

    ID  shift, and go to state 3

    params   go to state 71
    id_list  go to state 72
    id       go to state 8


state 45

    8 sub: PROCEDURE id SEMICOLON . declares program_body SEMICOLON

    $default  reduce using rule 3 (declares)

    declares  go to state 73


state 46

    7 sub: PROCEDURE id LP . params RP SEMICOLON declares program_body SEMICOLON

    ID  shift, and go to state 3

    params   go to state 74
    id_list  go to state 72
    id       go to state 8


state 47

   30 exp: LP . exp RP

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 75
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 48

   26 exp: SUB . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 76
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 49

   33 exp: NOT . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 77
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 50

   62 int: INT .

    $default  reduce using rule 62 (int)


state 51

   61 num: REAL .

    $default  reduce using rule 61 (num)


state 52

   57 boolexp: TRUE .

    $default  reduce using rule 57 (boolexp)


state 53

   58 boolexp: FALSE .

    $default  reduce using rule 58 (boolexp)


state 54

   17 stmt: IF exp . THEN stmt ELSE stmt
   18     | IF exp . THEN stmt
   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    THEN  shift, and go to state 78
    ADD   shift, and go to state 79
    SUB   shift, and go to state 80
    MUL   shift, and go to state 81
    DIV   shift, and go to state 82
    MOD   shift, and go to state 83
    AND   shift, and go to state 84
    OR    shift, and go to state 85
    GT    shift, and go to state 86
    LT    shift, and go to state 87
    EQ    shift, and go to state 88
    NEQ   shift, and go to state 89
    GTE   shift, and go to state 90
    LTE   shift, and go to state 91


state 55

   40 exp: call .

    $default  reduce using rule 40 (exp)


state 56

   43 exp: boolexp .

    $default  reduce using rule 43 (exp)


state 57

   41 exp: id .
   48 usercall: id . LP exp_list RP

    LP  shift, and go to state 67

    $default  reduce using rule 41 (exp)


state 58

   42 exp: num .

    $default  reduce using rule 42 (exp)


state 59

   60 num: int .

    $default  reduce using rule 60 (num)


state 60

   19 stmt: WHILE exp . DO stmt
   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    DO   shift, and go to state 92
    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83
    AND  shift, and go to state 84
    OR   shift, and go to state 85
    GT   shift, and go to state 86
    LT   shift, and go to state 87
    EQ   shift, and go to state 88
    NEQ  shift, and go to state 89
    GTE  shift, and go to state 90
    LTE  shift, and go to state 91


state 61

   20 stmt: BGIN stmts . END

    END  shift, and go to state 93


state 62

   46 syscall: READ LP . exp_list RP

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp_list  go to state 94
    exp       go to state 95
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 63

   47 syscall: WRITE LP . exp_list RP

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp_list  go to state 96
    exp       go to state 95
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 64

   11 program_body: BGIN stmts END .

    $default  reduce using rule 11 (program_body)


state 65

   12 stmts: stmt SEMICOLON . stmts

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    $default  reduce using rule 14 (stmts)

    stmts     go to state 97
    stmt      go to state 32
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 66

   15 stmt: var ASSIGN . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 98
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 67

   48 usercall: id LP . exp_list RP

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp_list  go to state 99
    exp       go to state 95
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 68

   50 var: id LSQ . exp RSQ

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 100
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 69

   52 type: ARRAY LSQ . int DOTDOT int RSQ OF stdtype

    INT  shift, and go to state 50

    int  go to state 101


state 70

    2 declares: declares VAR id_list COLON type SEMICOLON .

    $default  reduce using rule 2 (declares)


state 71

    6 sub: FUNCTION id LP params . RP COLON stdtype SEMICOLON declares program_body SEMICOLON
    9 params: params . SEMICOLON id_list COLON type

    SEMICOLON  shift, and go to state 102
    RP         shift, and go to state 103


state 72

   10 params: id_list . COLON type
   55 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 104


state 73

    2 declares: declares . VAR id_list COLON type SEMICOLON
    8 sub: PROCEDURE id SEMICOLON declares . program_body SEMICOLON

    VAR   shift, and go to state 14
    BGIN  shift, and go to state 19

    program_body  go to state 105


state 74

    7 sub: PROCEDURE id LP params . RP SEMICOLON declares program_body SEMICOLON
    9 params: params . SEMICOLON id_list COLON type

    SEMICOLON  shift, and go to state 102
    RP         shift, and go to state 106


state 75

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   30    | LP exp . RP
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    RP   shift, and go to state 107
    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83
    AND  shift, and go to state 84
    OR   shift, and go to state 85
    GT   shift, and go to state 86
    LT   shift, and go to state 87
    EQ   shift, and go to state 88
    NEQ  shift, and go to state 89
    GTE  shift, and go to state 90
    LTE  shift, and go to state 91


state 76

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   26    | SUB exp .
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    $default  reduce using rule 26 (exp)


state 77

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   33    | NOT exp .
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83
    GT   shift, and go to state 86
    LT   shift, and go to state 87
    EQ   shift, and go to state 88
    NEQ  shift, and go to state 89
    GTE  shift, and go to state 90
    LTE  shift, and go to state 91

    $default  reduce using rule 33 (exp)


state 78

   17 stmt: IF exp THEN . stmt ELSE stmt
   18     | IF exp THEN . stmt

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    stmt      go to state 108
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 79

   24 exp: exp ADD . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 109
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 80

   25 exp: exp SUB . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 110
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 81

   27 exp: exp MUL . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 111
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 82

   28 exp: exp DIV . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 112
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 83

   29 exp: exp MOD . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 113
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 84

   31 exp: exp AND . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 114
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 85

   32 exp: exp OR . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 115
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 86

   34 exp: exp GT . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 116
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 87

   35 exp: exp LT . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 117
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 88

   38 exp: exp EQ . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 118
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 89

   39 exp: exp NEQ . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 119
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 90

   36 exp: exp GTE . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 120
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 91

   37 exp: exp LTE . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 121
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 92

   19 stmt: WHILE exp DO . stmt

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    stmt      go to state 122
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 93

   20 stmt: BGIN stmts END .

    $default  reduce using rule 20 (stmt)


state 94

   22 exp_list: exp_list . COMMA exp
   46 syscall: READ LP exp_list . RP

    COMMA  shift, and go to state 123
    RP     shift, and go to state 124


state 95

   23 exp_list: exp .
   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83
    AND  shift, and go to state 84
    OR   shift, and go to state 85
    GT   shift, and go to state 86
    LT   shift, and go to state 87
    EQ   shift, and go to state 88
    NEQ  shift, and go to state 89
    GTE  shift, and go to state 90
    LTE  shift, and go to state 91

    $default  reduce using rule 23 (exp_list)


state 96

   22 exp_list: exp_list . COMMA exp
   47 syscall: WRITE LP exp_list . RP

    COMMA  shift, and go to state 123
    RP     shift, and go to state 125


state 97

   12 stmts: stmt SEMICOLON stmts .

    $default  reduce using rule 12 (stmts)


state 98

   15 stmt: var ASSIGN exp .
   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83
    AND  shift, and go to state 84
    OR   shift, and go to state 85
    GT   shift, and go to state 86
    LT   shift, and go to state 87
    EQ   shift, and go to state 88
    NEQ  shift, and go to state 89
    GTE  shift, and go to state 90
    LTE  shift, and go to state 91

    $default  reduce using rule 15 (stmt)


state 99

   22 exp_list: exp_list . COMMA exp
   48 usercall: id LP exp_list . RP

    COMMA  shift, and go to state 123
    RP     shift, and go to state 126


state 100

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   50 var: id LSQ exp . RSQ

    RSQ  shift, and go to state 127
    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83
    AND  shift, and go to state 84
    OR   shift, and go to state 85
    GT   shift, and go to state 86
    LT   shift, and go to state 87
    EQ   shift, and go to state 88
    NEQ  shift, and go to state 89
    GTE  shift, and go to state 90
    LTE  shift, and go to state 91


state 101

   52 type: ARRAY LSQ int . DOTDOT int RSQ OF stdtype

    DOTDOT  shift, and go to state 128


state 102

    9 params: params SEMICOLON . id_list COLON type

    ID  shift, and go to state 3

    id_list  go to state 129
    id       go to state 8


state 103

    6 sub: FUNCTION id LP params RP . COLON stdtype SEMICOLON declares program_body SEMICOLON

    COLON  shift, and go to state 130


state 104

   10 params: id_list COLON . type

    ARRAY  shift, and go to state 39
    TINT   shift, and go to state 40
    TREAL  shift, and go to state 41

    type     go to state 131
    stdtype  go to state 43


state 105

    8 sub: PROCEDURE id SEMICOLON declares program_body . SEMICOLON

    SEMICOLON  shift, and go to state 132


state 106

    7 sub: PROCEDURE id LP params RP . SEMICOLON declares program_body SEMICOLON

    SEMICOLON  shift, and go to state 133


state 107

   30 exp: LP exp RP .

    $default  reduce using rule 30 (exp)


state 108

   17 stmt: IF exp THEN stmt . ELSE stmt
   18     | IF exp THEN stmt .

    ELSE  shift, and go to state 134

    $default  reduce using rule 18 (stmt)


state 109

   24 exp: exp . ADD exp
   24    | exp ADD exp .
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83

    $default  reduce using rule 24 (exp)


state 110

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   25    | exp SUB exp .
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83

    $default  reduce using rule 25 (exp)


state 111

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   27    | exp MUL exp .
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    $default  reduce using rule 27 (exp)


state 112

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   28    | exp DIV exp .
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    $default  reduce using rule 28 (exp)


state 113

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   29    | exp MOD exp .
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    $default  reduce using rule 29 (exp)


state 114

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   31    | exp AND exp .
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83
    GT   shift, and go to state 86
    LT   shift, and go to state 87
    EQ   shift, and go to state 88
    NEQ  shift, and go to state 89
    GTE  shift, and go to state 90
    LTE  shift, and go to state 91

    $default  reduce using rule 31 (exp)


state 115

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   32    | exp OR exp .
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83
    AND  shift, and go to state 84
    GT   shift, and go to state 86
    LT   shift, and go to state 87
    EQ   shift, and go to state 88
    NEQ  shift, and go to state 89
    GTE  shift, and go to state 90
    LTE  shift, and go to state 91

    $default  reduce using rule 32 (exp)


state 116

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   34    | exp GT exp .
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83

    $default  reduce using rule 34 (exp)


state 117

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   35    | exp LT exp .
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83

    $default  reduce using rule 35 (exp)


state 118

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   38    | exp EQ exp .
   39    | exp . NEQ exp

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83
    GT   shift, and go to state 86
    LT   shift, and go to state 87
    GTE  shift, and go to state 90
    LTE  shift, and go to state 91

    $default  reduce using rule 38 (exp)


state 119

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp
   39    | exp NEQ exp .

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83
    GT   shift, and go to state 86
    LT   shift, and go to state 87
    GTE  shift, and go to state 90
    LTE  shift, and go to state 91

    $default  reduce using rule 39 (exp)


state 120

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   36    | exp GTE exp .
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83

    $default  reduce using rule 36 (exp)


state 121

   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   37    | exp LTE exp .
   38    | exp . EQ exp
   39    | exp . NEQ exp

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83

    $default  reduce using rule 37 (exp)


state 122

   19 stmt: WHILE exp DO stmt .

    $default  reduce using rule 19 (stmt)


state 123

   22 exp_list: exp_list COMMA . exp

    LP     shift, and go to state 47
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 48
    NOT    shift, and go to state 49
    INT    shift, and go to state 50
    REAL   shift, and go to state 51
    ID     shift, and go to state 3
    TRUE   shift, and go to state 52
    FALSE  shift, and go to state 53

    exp       go to state 135
    call      go to state 55
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 56
    id        go to state 57
    num       go to state 58
    int       go to state 59


state 124

   46 syscall: READ LP exp_list RP .

    $default  reduce using rule 46 (syscall)


state 125

   47 syscall: WRITE LP exp_list RP .

    $default  reduce using rule 47 (syscall)


state 126

   48 usercall: id LP exp_list RP .

    $default  reduce using rule 48 (usercall)


state 127

   50 var: id LSQ exp RSQ .

    $default  reduce using rule 50 (var)


state 128

   52 type: ARRAY LSQ int DOTDOT . int RSQ OF stdtype

    INT  shift, and go to state 50

    int  go to state 136


state 129

    9 params: params SEMICOLON id_list . COLON type
   55 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 137


state 130

    6 sub: FUNCTION id LP params RP COLON . stdtype SEMICOLON declares program_body SEMICOLON

    TINT   shift, and go to state 40
    TREAL  shift, and go to state 41

    stdtype  go to state 138


state 131

   10 params: id_list COLON type .

    $default  reduce using rule 10 (params)


state 132

    8 sub: PROCEDURE id SEMICOLON declares program_body SEMICOLON .

    $default  reduce using rule 8 (sub)


state 133

    7 sub: PROCEDURE id LP params RP SEMICOLON . declares program_body SEMICOLON

    $default  reduce using rule 3 (declares)

    declares  go to state 139


state 134

   17 stmt: IF exp THEN stmt ELSE . stmt

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    stmt      go to state 140
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 135

   22 exp_list: exp_list COMMA exp .
   24 exp: exp . ADD exp
   25    | exp . SUB exp
   27    | exp . MUL exp
   28    | exp . DIV exp
   29    | exp . MOD exp
   31    | exp . AND exp
   32    | exp . OR exp
   34    | exp . GT exp
   35    | exp . LT exp
   36    | exp . GTE exp
   37    | exp . LTE exp
   38    | exp . EQ exp
   39    | exp . NEQ exp

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80
    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83
    AND  shift, and go to state 84
    OR   shift, and go to state 85
    GT   shift, and go to state 86
    LT   shift, and go to state 87
    EQ   shift, and go to state 88
    NEQ  shift, and go to state 89
    GTE  shift, and go to state 90
    LTE  shift, and go to state 91

    $default  reduce using rule 22 (exp_list)


state 136

   52 type: ARRAY LSQ int DOTDOT int . RSQ OF stdtype

    RSQ  shift, and go to state 141


state 137

    9 params: params SEMICOLON id_list COLON . type

    ARRAY  shift, and go to state 39
    TINT   shift, and go to state 40
    TREAL  shift, and go to state 41

    type     go to state 142
    stdtype  go to state 43


state 138

    6 sub: FUNCTION id LP params RP COLON stdtype . SEMICOLON declares program_body SEMICOLON

    SEMICOLON  shift, and go to state 143


state 139

    2 declares: declares . VAR id_list COLON type SEMICOLON
    7 sub: PROCEDURE id LP params RP SEMICOLON declares . program_body SEMICOLON

    VAR   shift, and go to state 14
    BGIN  shift, and go to state 19

    program_body  go to state 144


state 140

   17 stmt: IF exp THEN stmt ELSE stmt .

    $default  reduce using rule 17 (stmt)


state 141

   52 type: ARRAY LSQ int DOTDOT int RSQ . OF stdtype

    OF  shift, and go to state 145


state 142

    9 params: params SEMICOLON id_list COLON type .

    $default  reduce using rule 9 (params)


state 143

    6 sub: FUNCTION id LP params RP COLON stdtype SEMICOLON . declares program_body SEMICOLON

    $default  reduce using rule 3 (declares)

    declares  go to state 146


state 144

    7 sub: PROCEDURE id LP params RP SEMICOLON declares program_body . SEMICOLON

    SEMICOLON  shift, and go to state 147


state 145

   52 type: ARRAY LSQ int DOTDOT int RSQ OF . stdtype

    TINT   shift, and go to state 40
    TREAL  shift, and go to state 41

    stdtype  go to state 148


state 146

    2 declares: declares . VAR id_list COLON type SEMICOLON
    6 sub: FUNCTION id LP params RP COLON stdtype SEMICOLON declares . program_body SEMICOLON

    VAR   shift, and go to state 14
    BGIN  shift, and go to state 19

    program_body  go to state 149


state 147

    7 sub: PROCEDURE id LP params RP SEMICOLON declares program_body SEMICOLON .

    $default  reduce using rule 7 (sub)


state 148

   52 type: ARRAY LSQ int DOTDOT int RSQ OF stdtype .

    $default  reduce using rule 52 (type)


state 149

    6 sub: FUNCTION id LP params RP COLON stdtype SEMICOLON declares program_body . SEMICOLON

    SEMICOLON  shift, and go to state 150


state 150

    6 sub: FUNCTION id LP params RP COLON stdtype SEMICOLON declares program_body SEMICOLON .

    $default  reduce using rule 6 (sub)

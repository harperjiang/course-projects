Grammar

    0 $accept: program $end

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body DOT

    2 declares: declares VAR id_list COLON type SEMICOLON
    3         | /* empty */

    4 subs: subs sub
    5     | /* empty */

    6 sub: FUNCTION id LP params RP COLON stdtype SEMICOLON declares subs program_body SEMICOLON
    7    | PROCEDURE id LP params RP SEMICOLON declares subs program_body SEMICOLON
    8    | PROCEDURE id SEMICOLON declares subs program_body SEMICOLON

    9 params: params SEMICOLON id_list COLON type
   10       | id_list COLON type

   11 program_body: BGIN stmts END

   12 stmts: stmt SEMICOLON stmts
   13      | stmt
   14      | /* empty */

   15 stmt: var ASSIGN exp
   16     | call
   17     | IF exp THEN stmt ELSE stmt
   18     | IF exp THEN stmt
   19     | WHILE exp DO stmt
   20     | FOR id ASSIGN exp TO exp DO stmt
   21     | BGIN stmts END
   22     | BREAK
   23     | id

   24 exp_list: exp_list COMMA exp
   25         | exp

   26 exp: exp ADD exp
   27    | exp SUB exp
   28    | SUB exp
   29    | exp MUL exp
   30    | exp DIV exp
   31    | exp MOD exp
   32    | LP exp RP
   33    | exp AND exp
   34    | exp OR exp
   35    | NOT exp
   36    | exp GT exp
   37    | exp LT exp
   38    | exp GTE exp
   39    | exp LTE exp
   40    | exp EQ exp
   41    | exp NEQ exp
   42    | call
   43    | var
   44    | num
   45    | boolexp

   46 call: syscall
   47     | usercall

   48 syscall: READ LP exp_list RP
   49        | WRITE LP exp_list RP

   50 usercall: id LP exp_list RP

   51 var: id
   52    | id LSQ exp RSQ

   53 type: stdtype
   54     | ARRAY LSQ int DOTDOT int RSQ OF stdtype

   55 stdtype: TREAL
   56        | TINT

   57 id_list: id_list COMMA id
   58        | id

   59 boolexp: TRUE
   60        | FALSE

   61 id: ID

   62 num: int
   63    | REAL

   64 int: INT


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 1
FUNCTION (259) 6
PROCEDURE (260) 7 8
VAR (261) 2
IF (262) 17 18
ELSE (263) 17
THEN (264) 17 18
WHILE (265) 19
DO (266) 19 20
BGIN (267) 11 21
END (268) 11 21
FOR (269) 20
TO (270) 20
SEMICOLON (271) 1 2 6 7 8 9 12
COMMA (272) 24 57
COLON (273) 2 6 9 10
DOT (274) 1
DOTDOT (275) 54
LP (276) 1 6 7 32 48 49 50
RP (277) 1 6 7 32 48 49 50
LSQ (278) 52 54
RSQ (279) 52 54
READ (280) 48
WRITE (281) 49
ARRAY (282) 54
TINT (283) 56
TREAL (284) 55
OF (285) 54
ASSIGN (286) 15 20
ADD (287) 26
SUB (288) 27 28
MUL (289) 29
DIV (290) 30
MOD (291) 31
AND (292) 33
OR (293) 34
NOT (294) 35
GT (295) 36
LT (296) 37
EQ (297) 40
NEQ (298) 41
GTE (299) 38
LTE (300) 39
INT (301) 64
REAL (302) 63
ID (303) 61
TRUE (304) 59
FALSE (305) 60
BREAK (306) 22
UMINUS (307)


Nonterminals, with rules where they appear

$accept (53)
    on left: 0
program (54)
    on left: 1, on right: 0
declares (55)
    on left: 2 3, on right: 1 2 6 7 8
subs (56)
    on left: 4 5, on right: 1 4 6 7 8
sub (57)
    on left: 6 7 8, on right: 4
params (58)
    on left: 9 10, on right: 6 7 9
program_body (59)
    on left: 11, on right: 1 6 7 8
stmts (60)
    on left: 12 13 14, on right: 11 12 21
stmt (61)
    on left: 15 16 17 18 19 20 21 22 23, on right: 12 13 17 18 19 20
exp_list (62)
    on left: 24 25, on right: 24 48 49 50
exp (63)
    on left: 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
    44 45, on right: 15 17 18 19 20 24 25 26 27 28 29 30 31 32 33 34
    35 36 37 38 39 40 41 52
call (64)
    on left: 46 47, on right: 16 42
syscall (65)
    on left: 48 49, on right: 46
usercall (66)
    on left: 50, on right: 47
var (67)
    on left: 51 52, on right: 15 43
type (68)
    on left: 53 54, on right: 2 9 10
stdtype (69)
    on left: 55 56, on right: 6 53 54
id_list (70)
    on left: 57 58, on right: 1 2 9 10 57
boolexp (71)
    on left: 59 60, on right: 45
id (72)
    on left: 61, on right: 1 6 7 8 20 23 50 51 52 57 58
num (73)
    on left: 62 63, on right: 44
int (74)
    on left: 64, on right: 54 62


state 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


state 1

    1 program: PROGRAM . id LP id_list RP SEMICOLON declares subs program_body DOT

    ID  shift, and go to state 3

    id  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

   61 id: ID .

    $default  reduce using rule 61 (id)


state 4

    1 program: PROGRAM id . LP id_list RP SEMICOLON declares subs program_body DOT

    LP  shift, and go to state 6


state 5

    0 $accept: program $end .

    $default  accept


state 6

    1 program: PROGRAM id LP . id_list RP SEMICOLON declares subs program_body DOT

    ID  shift, and go to state 3

    id_list  go to state 7
    id       go to state 8


state 7

    1 program: PROGRAM id LP id_list . RP SEMICOLON declares subs program_body DOT
   57 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    RP     shift, and go to state 10


state 8

   58 id_list: id .

    $default  reduce using rule 58 (id_list)


state 9

   57 id_list: id_list COMMA . id

    ID  shift, and go to state 3

    id  go to state 11


state 10

    1 program: PROGRAM id LP id_list RP . SEMICOLON declares subs program_body DOT

    SEMICOLON  shift, and go to state 12


state 11

   57 id_list: id_list COMMA id .

    $default  reduce using rule 57 (id_list)


state 12

    1 program: PROGRAM id LP id_list RP SEMICOLON . declares subs program_body DOT

    $default  reduce using rule 3 (declares)

    declares  go to state 13


state 13

    1 program: PROGRAM id LP id_list RP SEMICOLON declares . subs program_body DOT
    2 declares: declares . VAR id_list COLON type SEMICOLON

    VAR  shift, and go to state 14

    $default  reduce using rule 5 (subs)

    subs  go to state 15


state 14

    2 declares: declares VAR . id_list COLON type SEMICOLON

    ID  shift, and go to state 3

    id_list  go to state 16
    id       go to state 8


state 15

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs . program_body DOT
    4 subs: subs . sub

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BGIN       shift, and go to state 19

    sub           go to state 20
    program_body  go to state 21


state 16

    2 declares: declares VAR id_list . COLON type SEMICOLON
   57 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 22


state 17

    6 sub: FUNCTION . id LP params RP COLON stdtype SEMICOLON declares subs program_body SEMICOLON

    ID  shift, and go to state 3

    id  go to state 23


state 18

    7 sub: PROCEDURE . id LP params RP SEMICOLON declares subs program_body SEMICOLON
    8    | PROCEDURE . id SEMICOLON declares subs program_body SEMICOLON

    ID  shift, and go to state 3

    id  go to state 24


state 19

   11 program_body: BGIN . stmts END

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    FOR    shift, and go to state 28
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    ID     shift, and go to state 3
    BREAK  shift, and go to state 31

    $default  reduce using rule 14 (stmts)

    stmts     go to state 32
    stmt      go to state 33
    call      go to state 34
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 37
    id        go to state 38


state 20

    4 subs: subs sub .

    $default  reduce using rule 4 (subs)


state 21

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body . DOT

    DOT  shift, and go to state 39


state 22

    2 declares: declares VAR id_list COLON . type SEMICOLON

    ARRAY  shift, and go to state 40
    TINT   shift, and go to state 41
    TREAL  shift, and go to state 42

    type     go to state 43
    stdtype  go to state 44


state 23

    6 sub: FUNCTION id . LP params RP COLON stdtype SEMICOLON declares subs program_body SEMICOLON

    LP  shift, and go to state 45


state 24

    7 sub: PROCEDURE id . LP params RP SEMICOLON declares subs program_body SEMICOLON
    8    | PROCEDURE id . SEMICOLON declares subs program_body SEMICOLON

    SEMICOLON  shift, and go to state 46
    LP         shift, and go to state 47


state 25

   17 stmt: IF . exp THEN stmt ELSE stmt
   18     | IF . exp THEN stmt

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 55
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 26

   19 stmt: WHILE . exp DO stmt

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 62
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 27

   21 stmt: BGIN . stmts END

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    FOR    shift, and go to state 28
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    ID     shift, and go to state 3
    BREAK  shift, and go to state 31

    $default  reduce using rule 14 (stmts)

    stmts     go to state 63
    stmt      go to state 33
    call      go to state 34
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 37
    id        go to state 38


state 28

   20 stmt: FOR . id ASSIGN exp TO exp DO stmt

    ID  shift, and go to state 3

    id  go to state 64


state 29

   48 syscall: READ . LP exp_list RP

    LP  shift, and go to state 65


state 30

   49 syscall: WRITE . LP exp_list RP

    LP  shift, and go to state 66


state 31

   22 stmt: BREAK .

    $default  reduce using rule 22 (stmt)


state 32

   11 program_body: BGIN stmts . END

    END  shift, and go to state 67


state 33

   12 stmts: stmt . SEMICOLON stmts
   13      | stmt .

    SEMICOLON  shift, and go to state 68

    $default  reduce using rule 13 (stmts)


state 34

   16 stmt: call .

    $default  reduce using rule 16 (stmt)


state 35

   46 call: syscall .

    $default  reduce using rule 46 (call)


state 36

   47 call: usercall .

    $default  reduce using rule 47 (call)


state 37

   15 stmt: var . ASSIGN exp

    ASSIGN  shift, and go to state 69


state 38

   23 stmt: id .
   50 usercall: id . LP exp_list RP
   51 var: id .
   52    | id . LSQ exp RSQ

    LP   shift, and go to state 70
    LSQ  shift, and go to state 71

    ASSIGN    reduce using rule 51 (var)
    $default  reduce using rule 23 (stmt)


state 39

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body DOT .

    $default  reduce using rule 1 (program)


state 40

   54 type: ARRAY . LSQ int DOTDOT int RSQ OF stdtype

    LSQ  shift, and go to state 72


state 41

   56 stdtype: TINT .

    $default  reduce using rule 56 (stdtype)


state 42

   55 stdtype: TREAL .

    $default  reduce using rule 55 (stdtype)


state 43

    2 declares: declares VAR id_list COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 73


state 44

   53 type: stdtype .

    $default  reduce using rule 53 (type)


state 45

    6 sub: FUNCTION id LP . params RP COLON stdtype SEMICOLON declares subs program_body SEMICOLON

    ID  shift, and go to state 3

    params   go to state 74
    id_list  go to state 75
    id       go to state 8


state 46

    8 sub: PROCEDURE id SEMICOLON . declares subs program_body SEMICOLON

    $default  reduce using rule 3 (declares)

    declares  go to state 76


state 47

    7 sub: PROCEDURE id LP . params RP SEMICOLON declares subs program_body SEMICOLON

    ID  shift, and go to state 3

    params   go to state 77
    id_list  go to state 75
    id       go to state 8


state 48

   32 exp: LP . exp RP

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 78
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 49

   28 exp: SUB . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 79
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 50

   35 exp: NOT . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 80
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 51

   64 int: INT .

    $default  reduce using rule 64 (int)


state 52

   63 num: REAL .

    $default  reduce using rule 63 (num)


state 53

   59 boolexp: TRUE .

    $default  reduce using rule 59 (boolexp)


state 54

   60 boolexp: FALSE .

    $default  reduce using rule 60 (boolexp)


state 55

   17 stmt: IF exp . THEN stmt ELSE stmt
   18     | IF exp . THEN stmt
   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    THEN  shift, and go to state 81
    ADD   shift, and go to state 82
    SUB   shift, and go to state 83
    MUL   shift, and go to state 84
    DIV   shift, and go to state 85
    MOD   shift, and go to state 86
    AND   shift, and go to state 87
    OR    shift, and go to state 88
    GT    shift, and go to state 89
    LT    shift, and go to state 90
    EQ    shift, and go to state 91
    NEQ   shift, and go to state 92
    GTE   shift, and go to state 93
    LTE   shift, and go to state 94


state 56

   42 exp: call .

    $default  reduce using rule 42 (exp)


state 57

   43 exp: var .

    $default  reduce using rule 43 (exp)


state 58

   45 exp: boolexp .

    $default  reduce using rule 45 (exp)


state 59

   50 usercall: id . LP exp_list RP
   51 var: id .
   52    | id . LSQ exp RSQ

    LP   shift, and go to state 70
    LSQ  shift, and go to state 71

    $default  reduce using rule 51 (var)


state 60

   44 exp: num .

    $default  reduce using rule 44 (exp)


state 61

   62 num: int .

    $default  reduce using rule 62 (num)


state 62

   19 stmt: WHILE exp . DO stmt
   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    DO   shift, and go to state 95
    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    AND  shift, and go to state 87
    OR   shift, and go to state 88
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94


state 63

   21 stmt: BGIN stmts . END

    END  shift, and go to state 96


state 64

   20 stmt: FOR id . ASSIGN exp TO exp DO stmt

    ASSIGN  shift, and go to state 97


state 65

   48 syscall: READ LP . exp_list RP

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp_list  go to state 98
    exp       go to state 99
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 66

   49 syscall: WRITE LP . exp_list RP

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp_list  go to state 100
    exp       go to state 99
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 67

   11 program_body: BGIN stmts END .

    $default  reduce using rule 11 (program_body)


state 68

   12 stmts: stmt SEMICOLON . stmts

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    FOR    shift, and go to state 28
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    ID     shift, and go to state 3
    BREAK  shift, and go to state 31

    $default  reduce using rule 14 (stmts)

    stmts     go to state 101
    stmt      go to state 33
    call      go to state 34
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 37
    id        go to state 38


state 69

   15 stmt: var ASSIGN . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 102
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 70

   50 usercall: id LP . exp_list RP

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp_list  go to state 103
    exp       go to state 99
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 71

   52 var: id LSQ . exp RSQ

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 104
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 72

   54 type: ARRAY LSQ . int DOTDOT int RSQ OF stdtype

    INT  shift, and go to state 51

    int  go to state 105


state 73

    2 declares: declares VAR id_list COLON type SEMICOLON .

    $default  reduce using rule 2 (declares)


state 74

    6 sub: FUNCTION id LP params . RP COLON stdtype SEMICOLON declares subs program_body SEMICOLON
    9 params: params . SEMICOLON id_list COLON type

    SEMICOLON  shift, and go to state 106
    RP         shift, and go to state 107


state 75

   10 params: id_list . COLON type
   57 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 108


state 76

    2 declares: declares . VAR id_list COLON type SEMICOLON
    8 sub: PROCEDURE id SEMICOLON declares . subs program_body SEMICOLON

    VAR  shift, and go to state 14

    $default  reduce using rule 5 (subs)

    subs  go to state 109


state 77

    7 sub: PROCEDURE id LP params . RP SEMICOLON declares subs program_body SEMICOLON
    9 params: params . SEMICOLON id_list COLON type

    SEMICOLON  shift, and go to state 106
    RP         shift, and go to state 110


state 78

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   32    | LP exp . RP
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    RP   shift, and go to state 111
    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    AND  shift, and go to state 87
    OR   shift, and go to state 88
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94


state 79

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   28    | SUB exp .
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    $default  reduce using rule 28 (exp)


state 80

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   35    | NOT exp .
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94

    $default  reduce using rule 35 (exp)


state 81

   17 stmt: IF exp THEN . stmt ELSE stmt
   18     | IF exp THEN . stmt

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    FOR    shift, and go to state 28
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    ID     shift, and go to state 3
    BREAK  shift, and go to state 31

    stmt      go to state 112
    call      go to state 34
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 37
    id        go to state 38


state 82

   26 exp: exp ADD . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 113
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 83

   27 exp: exp SUB . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 114
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 84

   29 exp: exp MUL . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 115
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 85

   30 exp: exp DIV . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 116
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 86

   31 exp: exp MOD . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 117
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 87

   33 exp: exp AND . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 118
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 88

   34 exp: exp OR . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 119
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 89

   36 exp: exp GT . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 120
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 90

   37 exp: exp LT . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 121
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 91

   40 exp: exp EQ . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 122
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 92

   41 exp: exp NEQ . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 123
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 93

   38 exp: exp GTE . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 124
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 94

   39 exp: exp LTE . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 125
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 95

   19 stmt: WHILE exp DO . stmt

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    FOR    shift, and go to state 28
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    ID     shift, and go to state 3
    BREAK  shift, and go to state 31

    stmt      go to state 126
    call      go to state 34
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 37
    id        go to state 38


state 96

   21 stmt: BGIN stmts END .

    $default  reduce using rule 21 (stmt)


state 97

   20 stmt: FOR id ASSIGN . exp TO exp DO stmt

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 127
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 98

   24 exp_list: exp_list . COMMA exp
   48 syscall: READ LP exp_list . RP

    COMMA  shift, and go to state 128
    RP     shift, and go to state 129


state 99

   25 exp_list: exp .
   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    AND  shift, and go to state 87
    OR   shift, and go to state 88
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94

    $default  reduce using rule 25 (exp_list)


state 100

   24 exp_list: exp_list . COMMA exp
   49 syscall: WRITE LP exp_list . RP

    COMMA  shift, and go to state 128
    RP     shift, and go to state 130


state 101

   12 stmts: stmt SEMICOLON stmts .

    $default  reduce using rule 12 (stmts)


state 102

   15 stmt: var ASSIGN exp .
   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    AND  shift, and go to state 87
    OR   shift, and go to state 88
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94

    $default  reduce using rule 15 (stmt)


state 103

   24 exp_list: exp_list . COMMA exp
   50 usercall: id LP exp_list . RP

    COMMA  shift, and go to state 128
    RP     shift, and go to state 131


state 104

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp
   52 var: id LSQ exp . RSQ

    RSQ  shift, and go to state 132
    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    AND  shift, and go to state 87
    OR   shift, and go to state 88
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94


state 105

   54 type: ARRAY LSQ int . DOTDOT int RSQ OF stdtype

    DOTDOT  shift, and go to state 133


state 106

    9 params: params SEMICOLON . id_list COLON type

    ID  shift, and go to state 3

    id_list  go to state 134
    id       go to state 8


state 107

    6 sub: FUNCTION id LP params RP . COLON stdtype SEMICOLON declares subs program_body SEMICOLON

    COLON  shift, and go to state 135


state 108

   10 params: id_list COLON . type

    ARRAY  shift, and go to state 40
    TINT   shift, and go to state 41
    TREAL  shift, and go to state 42

    type     go to state 136
    stdtype  go to state 44


state 109

    4 subs: subs . sub
    8 sub: PROCEDURE id SEMICOLON declares subs . program_body SEMICOLON

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BGIN       shift, and go to state 19

    sub           go to state 20
    program_body  go to state 137


state 110

    7 sub: PROCEDURE id LP params RP . SEMICOLON declares subs program_body SEMICOLON

    SEMICOLON  shift, and go to state 138


state 111

   32 exp: LP exp RP .

    $default  reduce using rule 32 (exp)


state 112

   17 stmt: IF exp THEN stmt . ELSE stmt
   18     | IF exp THEN stmt .

    ELSE  shift, and go to state 139

    $default  reduce using rule 18 (stmt)


state 113

   26 exp: exp . ADD exp
   26    | exp ADD exp .
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86

    $default  reduce using rule 26 (exp)


state 114

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   27    | exp SUB exp .
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86

    $default  reduce using rule 27 (exp)


state 115

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   29    | exp MUL exp .
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    $default  reduce using rule 29 (exp)


state 116

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   30    | exp DIV exp .
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    $default  reduce using rule 30 (exp)


state 117

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   31    | exp MOD exp .
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    $default  reduce using rule 31 (exp)


state 118

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   33    | exp AND exp .
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94

    $default  reduce using rule 33 (exp)


state 119

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   34    | exp OR exp .
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    AND  shift, and go to state 87
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94

    $default  reduce using rule 34 (exp)


state 120

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   36    | exp GT exp .
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86

    $default  reduce using rule 36 (exp)


state 121

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   37    | exp LT exp .
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86

    $default  reduce using rule 37 (exp)


state 122

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   40    | exp EQ exp .
   41    | exp . NEQ exp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94

    $default  reduce using rule 40 (exp)


state 123

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp
   41    | exp NEQ exp .

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94

    $default  reduce using rule 41 (exp)


state 124

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   38    | exp GTE exp .
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86

    $default  reduce using rule 38 (exp)


state 125

   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   39    | exp LTE exp .
   40    | exp . EQ exp
   41    | exp . NEQ exp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86

    $default  reduce using rule 39 (exp)


state 126

   19 stmt: WHILE exp DO stmt .

    $default  reduce using rule 19 (stmt)


state 127

   20 stmt: FOR id ASSIGN exp . TO exp DO stmt
   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    TO   shift, and go to state 140
    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    AND  shift, and go to state 87
    OR   shift, and go to state 88
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94


state 128

   24 exp_list: exp_list COMMA . exp

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 141
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 129

   48 syscall: READ LP exp_list RP .

    $default  reduce using rule 48 (syscall)


state 130

   49 syscall: WRITE LP exp_list RP .

    $default  reduce using rule 49 (syscall)


state 131

   50 usercall: id LP exp_list RP .

    $default  reduce using rule 50 (usercall)


state 132

   52 var: id LSQ exp RSQ .

    $default  reduce using rule 52 (var)


state 133

   54 type: ARRAY LSQ int DOTDOT . int RSQ OF stdtype

    INT  shift, and go to state 51

    int  go to state 142


state 134

    9 params: params SEMICOLON id_list . COLON type
   57 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 143


state 135

    6 sub: FUNCTION id LP params RP COLON . stdtype SEMICOLON declares subs program_body SEMICOLON

    TINT   shift, and go to state 41
    TREAL  shift, and go to state 42

    stdtype  go to state 144


state 136

   10 params: id_list COLON type .

    $default  reduce using rule 10 (params)


state 137

    8 sub: PROCEDURE id SEMICOLON declares subs program_body . SEMICOLON

    SEMICOLON  shift, and go to state 145


state 138

    7 sub: PROCEDURE id LP params RP SEMICOLON . declares subs program_body SEMICOLON

    $default  reduce using rule 3 (declares)

    declares  go to state 146


state 139

   17 stmt: IF exp THEN stmt ELSE . stmt

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    FOR    shift, and go to state 28
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    ID     shift, and go to state 3
    BREAK  shift, and go to state 31

    stmt      go to state 147
    call      go to state 34
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 37
    id        go to state 38


state 140

   20 stmt: FOR id ASSIGN exp TO . exp DO stmt

    LP     shift, and go to state 48
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    SUB    shift, and go to state 49
    NOT    shift, and go to state 50
    INT    shift, and go to state 51
    REAL   shift, and go to state 52
    ID     shift, and go to state 3
    TRUE   shift, and go to state 53
    FALSE  shift, and go to state 54

    exp       go to state 148
    call      go to state 56
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 57
    boolexp   go to state 58
    id        go to state 59
    num       go to state 60
    int       go to state 61


state 141

   24 exp_list: exp_list COMMA exp .
   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    AND  shift, and go to state 87
    OR   shift, and go to state 88
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94

    $default  reduce using rule 24 (exp_list)


state 142

   54 type: ARRAY LSQ int DOTDOT int . RSQ OF stdtype

    RSQ  shift, and go to state 149


state 143

    9 params: params SEMICOLON id_list COLON . type

    ARRAY  shift, and go to state 40
    TINT   shift, and go to state 41
    TREAL  shift, and go to state 42

    type     go to state 150
    stdtype  go to state 44


state 144

    6 sub: FUNCTION id LP params RP COLON stdtype . SEMICOLON declares subs program_body SEMICOLON

    SEMICOLON  shift, and go to state 151


state 145

    8 sub: PROCEDURE id SEMICOLON declares subs program_body SEMICOLON .

    $default  reduce using rule 8 (sub)


state 146

    2 declares: declares . VAR id_list COLON type SEMICOLON
    7 sub: PROCEDURE id LP params RP SEMICOLON declares . subs program_body SEMICOLON

    VAR  shift, and go to state 14

    $default  reduce using rule 5 (subs)

    subs  go to state 152


state 147

   17 stmt: IF exp THEN stmt ELSE stmt .

    $default  reduce using rule 17 (stmt)


state 148

   20 stmt: FOR id ASSIGN exp TO exp . DO stmt
   26 exp: exp . ADD exp
   27    | exp . SUB exp
   29    | exp . MUL exp
   30    | exp . DIV exp
   31    | exp . MOD exp
   33    | exp . AND exp
   34    | exp . OR exp
   36    | exp . GT exp
   37    | exp . LT exp
   38    | exp . GTE exp
   39    | exp . LTE exp
   40    | exp . EQ exp
   41    | exp . NEQ exp

    DO   shift, and go to state 153
    ADD  shift, and go to state 82
    SUB  shift, and go to state 83
    MUL  shift, and go to state 84
    DIV  shift, and go to state 85
    MOD  shift, and go to state 86
    AND  shift, and go to state 87
    OR   shift, and go to state 88
    GT   shift, and go to state 89
    LT   shift, and go to state 90
    EQ   shift, and go to state 91
    NEQ  shift, and go to state 92
    GTE  shift, and go to state 93
    LTE  shift, and go to state 94


state 149

   54 type: ARRAY LSQ int DOTDOT int RSQ . OF stdtype

    OF  shift, and go to state 154


state 150

    9 params: params SEMICOLON id_list COLON type .

    $default  reduce using rule 9 (params)


state 151

    6 sub: FUNCTION id LP params RP COLON stdtype SEMICOLON . declares subs program_body SEMICOLON

    $default  reduce using rule 3 (declares)

    declares  go to state 155


state 152

    4 subs: subs . sub
    7 sub: PROCEDURE id LP params RP SEMICOLON declares subs . program_body SEMICOLON

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BGIN       shift, and go to state 19

    sub           go to state 20
    program_body  go to state 156


state 153

   20 stmt: FOR id ASSIGN exp TO exp DO . stmt

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    FOR    shift, and go to state 28
    READ   shift, and go to state 29
    WRITE  shift, and go to state 30
    ID     shift, and go to state 3
    BREAK  shift, and go to state 31

    stmt      go to state 157
    call      go to state 34
    syscall   go to state 35
    usercall  go to state 36
    var       go to state 37
    id        go to state 38


state 154

   54 type: ARRAY LSQ int DOTDOT int RSQ OF . stdtype

    TINT   shift, and go to state 41
    TREAL  shift, and go to state 42

    stdtype  go to state 158


state 155

    2 declares: declares . VAR id_list COLON type SEMICOLON
    6 sub: FUNCTION id LP params RP COLON stdtype SEMICOLON declares . subs program_body SEMICOLON

    VAR  shift, and go to state 14

    $default  reduce using rule 5 (subs)

    subs  go to state 159


state 156

    7 sub: PROCEDURE id LP params RP SEMICOLON declares subs program_body . SEMICOLON

    SEMICOLON  shift, and go to state 160


state 157

   20 stmt: FOR id ASSIGN exp TO exp DO stmt .

    $default  reduce using rule 20 (stmt)


state 158

   54 type: ARRAY LSQ int DOTDOT int RSQ OF stdtype .

    $default  reduce using rule 54 (type)


state 159

    4 subs: subs . sub
    6 sub: FUNCTION id LP params RP COLON stdtype SEMICOLON declares subs . program_body SEMICOLON

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BGIN       shift, and go to state 19

    sub           go to state 20
    program_body  go to state 161


state 160

    7 sub: PROCEDURE id LP params RP SEMICOLON declares subs program_body SEMICOLON .

    $default  reduce using rule 7 (sub)


state 161

    6 sub: FUNCTION id LP params RP COLON stdtype SEMICOLON declares subs program_body . SEMICOLON

    SEMICOLON  shift, and go to state 162


state 162

    6 sub: FUNCTION id LP params RP COLON stdtype SEMICOLON declares subs program_body SEMICOLON .

    $default  reduce using rule 6 (sub)

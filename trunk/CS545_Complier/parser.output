Grammar

    0 $accept: program $end

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body DOT

    2 declares: declares VAR id_list COLON type SEMICOLON
    3         | /* empty */

    4 subs: subs sub
    5     | /* empty */

    6 sub: FUNCTION id LP params RP COLON stdtype declares program_body SEMICOLON
    7    | PROCEDURE id LP params RP declares program_body SEMICOLON

    8 params: params SEMICOLON id_list COLON type
    9       | id_list COLON type

   10 program_body: BGIN stmts END

   11 stmts: stmts SEMICOLON stmt
   12      | /* empty */

   13 stmt: var ASSIGN exp
   14     | call
   15     | IF exp THEN stmt ELSE stmt
   16     | IF exp THEN stmt
   17     | WHILE exp DO stmt
   18     | BGIN stmts END
   19     | BREAK

   20 exp_list: exp_list COMMA exp
   21         | exp

   22 exp: exp ADD exp
   23    | exp SUB exp
   24    | SUB exp
   25    | exp MUL exp
   26    | exp DIV exp
   27    | exp MOD exp
   28    | LP exp RP
   29    | exp AND exp
   30    | exp OR exp
   31    | NOT exp
   32    | exp GT exp
   33    | exp LT exp
   34    | exp GTE exp
   35    | exp LTE exp
   36    | exp EQ exp
   37    | exp NEQ exp
   38    | call
   39    | id
   40    | num
   41    | boolexp

   42 call: syscall
   43     | usercall

   44 syscall: READ LP RP
   45        | WRITE LP exp_list RP

   46 usercall: id LP exp_list RP

   47 var: id
   48    | id LSQ exp RSQ

   49 type: stdtype
   50     | ARRAY LSQ int DOTDOT int RSQ OF stdtype

   51 stdtype: TREAL
   52        | TINT

   53 id_list: id_list COMMA id
   54        | id

   55 boolexp: TRUE
   56        | FALSE

   57 id: ID

   58 num: int
   59    | REAL

   60 int: INT


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 1
FUNCTION (259) 6
PROCEDURE (260) 7
VAR (261) 2
IF (262) 15 16
ELSE (263) 15
THEN (264) 15 16
WHILE (265) 17
DO (266) 17
BGIN (267) 10 18
END (268) 10 18
SEMICOLON (269) 1 2 6 7 8 11
COMMA (270) 20 53
COLON (271) 2 6 8 9
DOT (272) 1
DOTDOT (273) 50
LP (274) 1 6 7 28 44 45 46
RP (275) 1 6 7 28 44 45 46
LSQ (276) 48 50
RSQ (277) 48 50
READ (278) 44
WRITE (279) 45
ARRAY (280) 50
TINT (281) 52
TREAL (282) 51
OF (283) 50
ASSIGN (284) 13
ADD (285) 22
SUB (286) 23 24
MUL (287) 25
DIV (288) 26
MOD (289) 27
AND (290) 29
OR (291) 30
NOT (292) 31
GT (293) 32
LT (294) 33
EQ (295) 36
NEQ (296) 37
GTE (297) 34
LTE (298) 35
INT (299) 60
REAL (300) 59
ID (301) 57
TRUE (302) 55
FALSE (303) 56
BREAK (304) 19
UMINUS (305)


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1, on right: 0
declares (53)
    on left: 2 3, on right: 1 2 6 7
subs (54)
    on left: 4 5, on right: 1 4
sub (55)
    on left: 6 7, on right: 4
params (56)
    on left: 8 9, on right: 6 7 8
program_body (57)
    on left: 10, on right: 1 6 7
stmts (58)
    on left: 11 12, on right: 10 11 18
stmt (59)
    on left: 13 14 15 16 17 18 19, on right: 11 15 16 17
exp_list (60)
    on left: 20 21, on right: 20 45 46
exp (61)
    on left: 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
    40 41, on right: 13 15 16 17 20 21 22 23 24 25 26 27 28 29 30 31
    32 33 34 35 36 37 48
call (62)
    on left: 42 43, on right: 14 38
syscall (63)
    on left: 44 45, on right: 42
usercall (64)
    on left: 46, on right: 43
var (65)
    on left: 47 48, on right: 13
type (66)
    on left: 49 50, on right: 2 8 9
stdtype (67)
    on left: 51 52, on right: 6 49 50
id_list (68)
    on left: 53 54, on right: 1 2 8 9 53
boolexp (69)
    on left: 55 56, on right: 41
id (70)
    on left: 57, on right: 1 6 7 39 46 47 48 53 54
num (71)
    on left: 58 59, on right: 40
int (72)
    on left: 60, on right: 50 58


state 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


state 1

    1 program: PROGRAM . id LP id_list RP SEMICOLON declares subs program_body DOT

    ID  shift, and go to state 3

    id  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

   57 id: ID .

    $default  reduce using rule 57 (id)


state 4

    1 program: PROGRAM id . LP id_list RP SEMICOLON declares subs program_body DOT

    LP  shift, and go to state 6


state 5

    0 $accept: program $end .

    $default  accept


state 6

    1 program: PROGRAM id LP . id_list RP SEMICOLON declares subs program_body DOT

    ID  shift, and go to state 3

    id_list  go to state 7
    id       go to state 8


state 7

    1 program: PROGRAM id LP id_list . RP SEMICOLON declares subs program_body DOT
   53 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    RP     shift, and go to state 10


state 8

   54 id_list: id .

    $default  reduce using rule 54 (id_list)


state 9

   53 id_list: id_list COMMA . id

    ID  shift, and go to state 3

    id  go to state 11


state 10

    1 program: PROGRAM id LP id_list RP . SEMICOLON declares subs program_body DOT

    SEMICOLON  shift, and go to state 12


state 11

   53 id_list: id_list COMMA id .

    $default  reduce using rule 53 (id_list)


state 12

    1 program: PROGRAM id LP id_list RP SEMICOLON . declares subs program_body DOT

    $default  reduce using rule 3 (declares)

    declares  go to state 13


state 13

    1 program: PROGRAM id LP id_list RP SEMICOLON declares . subs program_body DOT
    2 declares: declares . VAR id_list COLON type SEMICOLON

    VAR  shift, and go to state 14

    $default  reduce using rule 5 (subs)

    subs  go to state 15


state 14

    2 declares: declares VAR . id_list COLON type SEMICOLON

    ID  shift, and go to state 3

    id_list  go to state 16
    id       go to state 8


state 15

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs . program_body DOT
    4 subs: subs . sub

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BGIN       shift, and go to state 19

    sub           go to state 20
    program_body  go to state 21


state 16

    2 declares: declares VAR id_list . COLON type SEMICOLON
   53 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 22


state 17

    6 sub: FUNCTION . id LP params RP COLON stdtype declares program_body SEMICOLON

    ID  shift, and go to state 3

    id  go to state 23


state 18

    7 sub: PROCEDURE . id LP params RP declares program_body SEMICOLON

    ID  shift, and go to state 3

    id  go to state 24


state 19

   10 program_body: BGIN . stmts END

    $default  reduce using rule 12 (stmts)

    stmts  go to state 25


state 20

    4 subs: subs sub .

    $default  reduce using rule 4 (subs)


state 21

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body . DOT

    DOT  shift, and go to state 26


state 22

    2 declares: declares VAR id_list COLON . type SEMICOLON

    ARRAY  shift, and go to state 27
    TINT   shift, and go to state 28
    TREAL  shift, and go to state 29

    type     go to state 30
    stdtype  go to state 31


state 23

    6 sub: FUNCTION id . LP params RP COLON stdtype declares program_body SEMICOLON

    LP  shift, and go to state 32


state 24

    7 sub: PROCEDURE id . LP params RP declares program_body SEMICOLON

    LP  shift, and go to state 33


state 25

   10 program_body: BGIN stmts . END
   11 stmts: stmts . SEMICOLON stmt

    END        shift, and go to state 34
    SEMICOLON  shift, and go to state 35


state 26

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body DOT .

    $default  reduce using rule 1 (program)


state 27

   50 type: ARRAY . LSQ int DOTDOT int RSQ OF stdtype

    LSQ  shift, and go to state 36


state 28

   52 stdtype: TINT .

    $default  reduce using rule 52 (stdtype)


state 29

   51 stdtype: TREAL .

    $default  reduce using rule 51 (stdtype)


state 30

    2 declares: declares VAR id_list COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 37


state 31

   49 type: stdtype .

    $default  reduce using rule 49 (type)


state 32

    6 sub: FUNCTION id LP . params RP COLON stdtype declares program_body SEMICOLON

    ID  shift, and go to state 3

    params   go to state 38
    id_list  go to state 39
    id       go to state 8


state 33

    7 sub: PROCEDURE id LP . params RP declares program_body SEMICOLON

    ID  shift, and go to state 3

    params   go to state 40
    id_list  go to state 39
    id       go to state 8


state 34

   10 program_body: BGIN stmts END .

    $default  reduce using rule 10 (program_body)


state 35

   11 stmts: stmts SEMICOLON . stmt

    IF     shift, and go to state 41
    WHILE  shift, and go to state 42
    BGIN   shift, and go to state 43
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    ID     shift, and go to state 3
    BREAK  shift, and go to state 46

    stmt      go to state 47
    call      go to state 48
    syscall   go to state 49
    usercall  go to state 50
    var       go to state 51
    id        go to state 52


state 36

   50 type: ARRAY LSQ . int DOTDOT int RSQ OF stdtype

    INT  shift, and go to state 53

    int  go to state 54


state 37

    2 declares: declares VAR id_list COLON type SEMICOLON .

    $default  reduce using rule 2 (declares)


state 38

    6 sub: FUNCTION id LP params . RP COLON stdtype declares program_body SEMICOLON
    8 params: params . SEMICOLON id_list COLON type

    SEMICOLON  shift, and go to state 55
    RP         shift, and go to state 56


state 39

    9 params: id_list . COLON type
   53 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 57


state 40

    7 sub: PROCEDURE id LP params . RP declares program_body SEMICOLON
    8 params: params . SEMICOLON id_list COLON type

    SEMICOLON  shift, and go to state 55
    RP         shift, and go to state 58


state 41

   15 stmt: IF . exp THEN stmt ELSE stmt
   16     | IF . exp THEN stmt

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 65
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 42

   17 stmt: WHILE . exp DO stmt

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 71
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 43

   18 stmt: BGIN . stmts END

    $default  reduce using rule 12 (stmts)

    stmts  go to state 72


state 44

   44 syscall: READ . LP RP

    LP  shift, and go to state 73


state 45

   45 syscall: WRITE . LP exp_list RP

    LP  shift, and go to state 74


state 46

   19 stmt: BREAK .

    $default  reduce using rule 19 (stmt)


state 47

   11 stmts: stmts SEMICOLON stmt .

    $default  reduce using rule 11 (stmts)


state 48

   14 stmt: call .

    $default  reduce using rule 14 (stmt)


state 49

   42 call: syscall .

    $default  reduce using rule 42 (call)


state 50

   43 call: usercall .

    $default  reduce using rule 43 (call)


state 51

   13 stmt: var . ASSIGN exp

    ASSIGN  shift, and go to state 75


state 52

   46 usercall: id . LP exp_list RP
   47 var: id .
   48    | id . LSQ exp RSQ

    LP   shift, and go to state 76
    LSQ  shift, and go to state 77

    $default  reduce using rule 47 (var)


state 53

   60 int: INT .

    $default  reduce using rule 60 (int)


state 54

   50 type: ARRAY LSQ int . DOTDOT int RSQ OF stdtype

    DOTDOT  shift, and go to state 78


state 55

    8 params: params SEMICOLON . id_list COLON type

    ID  shift, and go to state 3

    id_list  go to state 79
    id       go to state 8


state 56

    6 sub: FUNCTION id LP params RP . COLON stdtype declares program_body SEMICOLON

    COLON  shift, and go to state 80


state 57

    9 params: id_list COLON . type

    ARRAY  shift, and go to state 27
    TINT   shift, and go to state 28
    TREAL  shift, and go to state 29

    type     go to state 81
    stdtype  go to state 31


state 58

    7 sub: PROCEDURE id LP params RP . declares program_body SEMICOLON

    $default  reduce using rule 3 (declares)

    declares  go to state 82


state 59

   28 exp: LP . exp RP

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 83
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 60

   24 exp: SUB . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 84
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 61

   31 exp: NOT . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 85
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 62

   59 num: REAL .

    $default  reduce using rule 59 (num)


state 63

   55 boolexp: TRUE .

    $default  reduce using rule 55 (boolexp)


state 64

   56 boolexp: FALSE .

    $default  reduce using rule 56 (boolexp)


state 65

   15 stmt: IF exp . THEN stmt ELSE stmt
   16     | IF exp . THEN stmt
   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    THEN  shift, and go to state 86
    ADD   shift, and go to state 87
    SUB   shift, and go to state 88
    MUL   shift, and go to state 89
    DIV   shift, and go to state 90
    MOD   shift, and go to state 91
    AND   shift, and go to state 92
    OR    shift, and go to state 93
    GT    shift, and go to state 94
    LT    shift, and go to state 95
    EQ    shift, and go to state 96
    NEQ   shift, and go to state 97
    GTE   shift, and go to state 98
    LTE   shift, and go to state 99


state 66

   38 exp: call .

    $default  reduce using rule 38 (exp)


state 67

   41 exp: boolexp .

    $default  reduce using rule 41 (exp)


state 68

   39 exp: id .
   46 usercall: id . LP exp_list RP

    LP  shift, and go to state 76

    $default  reduce using rule 39 (exp)


state 69

   40 exp: num .

    $default  reduce using rule 40 (exp)


state 70

   58 num: int .

    $default  reduce using rule 58 (num)


state 71

   17 stmt: WHILE exp . DO stmt
   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    DO   shift, and go to state 100
    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91
    AND  shift, and go to state 92
    OR   shift, and go to state 93
    GT   shift, and go to state 94
    LT   shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GTE  shift, and go to state 98
    LTE  shift, and go to state 99


state 72

   11 stmts: stmts . SEMICOLON stmt
   18 stmt: BGIN stmts . END

    END        shift, and go to state 101
    SEMICOLON  shift, and go to state 35


state 73

   44 syscall: READ LP . RP

    RP  shift, and go to state 102


state 74

   45 syscall: WRITE LP . exp_list RP

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp_list  go to state 103
    exp       go to state 104
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 75

   13 stmt: var ASSIGN . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 105
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 76

   46 usercall: id LP . exp_list RP

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp_list  go to state 106
    exp       go to state 104
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 77

   48 var: id LSQ . exp RSQ

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 107
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 78

   50 type: ARRAY LSQ int DOTDOT . int RSQ OF stdtype

    INT  shift, and go to state 53

    int  go to state 108


state 79

    8 params: params SEMICOLON id_list . COLON type
   53 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 109


state 80

    6 sub: FUNCTION id LP params RP COLON . stdtype declares program_body SEMICOLON

    TINT   shift, and go to state 28
    TREAL  shift, and go to state 29

    stdtype  go to state 110


state 81

    9 params: id_list COLON type .

    $default  reduce using rule 9 (params)


state 82

    2 declares: declares . VAR id_list COLON type SEMICOLON
    7 sub: PROCEDURE id LP params RP declares . program_body SEMICOLON

    VAR   shift, and go to state 14
    BGIN  shift, and go to state 19

    program_body  go to state 111


state 83

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   28    | LP exp . RP
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    RP   shift, and go to state 112
    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91
    AND  shift, and go to state 92
    OR   shift, and go to state 93
    GT   shift, and go to state 94
    LT   shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GTE  shift, and go to state 98
    LTE  shift, and go to state 99


state 84

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   24    | SUB exp .
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    $default  reduce using rule 24 (exp)


state 85

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   31    | NOT exp .
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91
    GT   shift, and go to state 94
    LT   shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GTE  shift, and go to state 98
    LTE  shift, and go to state 99

    $default  reduce using rule 31 (exp)


state 86

   15 stmt: IF exp THEN . stmt ELSE stmt
   16     | IF exp THEN . stmt

    IF     shift, and go to state 41
    WHILE  shift, and go to state 42
    BGIN   shift, and go to state 43
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    ID     shift, and go to state 3
    BREAK  shift, and go to state 46

    stmt      go to state 113
    call      go to state 48
    syscall   go to state 49
    usercall  go to state 50
    var       go to state 51
    id        go to state 52


state 87

   22 exp: exp ADD . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 114
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 88

   23 exp: exp SUB . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 115
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 89

   25 exp: exp MUL . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 116
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 90

   26 exp: exp DIV . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 117
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 91

   27 exp: exp MOD . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 118
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 92

   29 exp: exp AND . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 119
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 93

   30 exp: exp OR . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 120
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 94

   32 exp: exp GT . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 121
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 95

   33 exp: exp LT . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 122
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 96

   36 exp: exp EQ . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 123
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 97

   37 exp: exp NEQ . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 124
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 98

   34 exp: exp GTE . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 125
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 99

   35 exp: exp LTE . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 126
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 100

   17 stmt: WHILE exp DO . stmt

    IF     shift, and go to state 41
    WHILE  shift, and go to state 42
    BGIN   shift, and go to state 43
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    ID     shift, and go to state 3
    BREAK  shift, and go to state 46

    stmt      go to state 127
    call      go to state 48
    syscall   go to state 49
    usercall  go to state 50
    var       go to state 51
    id        go to state 52


state 101

   18 stmt: BGIN stmts END .

    $default  reduce using rule 18 (stmt)


state 102

   44 syscall: READ LP RP .

    $default  reduce using rule 44 (syscall)


state 103

   20 exp_list: exp_list . COMMA exp
   45 syscall: WRITE LP exp_list . RP

    COMMA  shift, and go to state 128
    RP     shift, and go to state 129


state 104

   21 exp_list: exp .
   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91
    AND  shift, and go to state 92
    OR   shift, and go to state 93
    GT   shift, and go to state 94
    LT   shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GTE  shift, and go to state 98
    LTE  shift, and go to state 99

    $default  reduce using rule 21 (exp_list)


state 105

   13 stmt: var ASSIGN exp .
   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91
    AND  shift, and go to state 92
    OR   shift, and go to state 93
    GT   shift, and go to state 94
    LT   shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GTE  shift, and go to state 98
    LTE  shift, and go to state 99

    $default  reduce using rule 13 (stmt)


state 106

   20 exp_list: exp_list . COMMA exp
   46 usercall: id LP exp_list . RP

    COMMA  shift, and go to state 128
    RP     shift, and go to state 130


state 107

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp
   48 var: id LSQ exp . RSQ

    RSQ  shift, and go to state 131
    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91
    AND  shift, and go to state 92
    OR   shift, and go to state 93
    GT   shift, and go to state 94
    LT   shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GTE  shift, and go to state 98
    LTE  shift, and go to state 99


state 108

   50 type: ARRAY LSQ int DOTDOT int . RSQ OF stdtype

    RSQ  shift, and go to state 132


state 109

    8 params: params SEMICOLON id_list COLON . type

    ARRAY  shift, and go to state 27
    TINT   shift, and go to state 28
    TREAL  shift, and go to state 29

    type     go to state 133
    stdtype  go to state 31


state 110

    6 sub: FUNCTION id LP params RP COLON stdtype . declares program_body SEMICOLON

    $default  reduce using rule 3 (declares)

    declares  go to state 134


state 111

    7 sub: PROCEDURE id LP params RP declares program_body . SEMICOLON

    SEMICOLON  shift, and go to state 135


state 112

   28 exp: LP exp RP .

    $default  reduce using rule 28 (exp)


state 113

   15 stmt: IF exp THEN stmt . ELSE stmt
   16     | IF exp THEN stmt .

    ELSE  shift, and go to state 136

    $default  reduce using rule 16 (stmt)


state 114

   22 exp: exp . ADD exp
   22    | exp ADD exp .
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91

    $default  reduce using rule 22 (exp)


state 115

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   23    | exp SUB exp .
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91

    $default  reduce using rule 23 (exp)


state 116

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   25    | exp MUL exp .
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    $default  reduce using rule 25 (exp)


state 117

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   26    | exp DIV exp .
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    $default  reduce using rule 26 (exp)


state 118

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   27    | exp MOD exp .
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    $default  reduce using rule 27 (exp)


state 119

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   29    | exp AND exp .
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91
    GT   shift, and go to state 94
    LT   shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GTE  shift, and go to state 98
    LTE  shift, and go to state 99

    $default  reduce using rule 29 (exp)


state 120

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   30    | exp OR exp .
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91
    GT   shift, and go to state 94
    LT   shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GTE  shift, and go to state 98
    LTE  shift, and go to state 99

    $default  reduce using rule 30 (exp)


state 121

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   32    | exp GT exp .
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91

    $default  reduce using rule 32 (exp)


state 122

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   33    | exp LT exp .
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91

    $default  reduce using rule 33 (exp)


state 123

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   36    | exp EQ exp .
   37    | exp . NEQ exp

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91

    $default  reduce using rule 36 (exp)


state 124

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp
   37    | exp NEQ exp .

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91

    $default  reduce using rule 37 (exp)


state 125

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   34    | exp GTE exp .
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91

    $default  reduce using rule 34 (exp)


state 126

   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   35    | exp LTE exp .
   36    | exp . EQ exp
   37    | exp . NEQ exp

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91

    $default  reduce using rule 35 (exp)


state 127

   17 stmt: WHILE exp DO stmt .

    $default  reduce using rule 17 (stmt)


state 128

   20 exp_list: exp_list COMMA . exp

    LP     shift, and go to state 59
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    SUB    shift, and go to state 60
    NOT    shift, and go to state 61
    INT    shift, and go to state 53
    REAL   shift, and go to state 62
    ID     shift, and go to state 3
    TRUE   shift, and go to state 63
    FALSE  shift, and go to state 64

    exp       go to state 137
    call      go to state 66
    syscall   go to state 49
    usercall  go to state 50
    boolexp   go to state 67
    id        go to state 68
    num       go to state 69
    int       go to state 70


state 129

   45 syscall: WRITE LP exp_list RP .

    $default  reduce using rule 45 (syscall)


state 130

   46 usercall: id LP exp_list RP .

    $default  reduce using rule 46 (usercall)


state 131

   48 var: id LSQ exp RSQ .

    $default  reduce using rule 48 (var)


state 132

   50 type: ARRAY LSQ int DOTDOT int RSQ . OF stdtype

    OF  shift, and go to state 138


state 133

    8 params: params SEMICOLON id_list COLON type .

    $default  reduce using rule 8 (params)


state 134

    2 declares: declares . VAR id_list COLON type SEMICOLON
    6 sub: FUNCTION id LP params RP COLON stdtype declares . program_body SEMICOLON

    VAR   shift, and go to state 14
    BGIN  shift, and go to state 19

    program_body  go to state 139


state 135

    7 sub: PROCEDURE id LP params RP declares program_body SEMICOLON .

    $default  reduce using rule 7 (sub)


state 136

   15 stmt: IF exp THEN stmt ELSE . stmt

    IF     shift, and go to state 41
    WHILE  shift, and go to state 42
    BGIN   shift, and go to state 43
    READ   shift, and go to state 44
    WRITE  shift, and go to state 45
    ID     shift, and go to state 3
    BREAK  shift, and go to state 46

    stmt      go to state 140
    call      go to state 48
    syscall   go to state 49
    usercall  go to state 50
    var       go to state 51
    id        go to state 52


state 137

   20 exp_list: exp_list COMMA exp .
   22 exp: exp . ADD exp
   23    | exp . SUB exp
   25    | exp . MUL exp
   26    | exp . DIV exp
   27    | exp . MOD exp
   29    | exp . AND exp
   30    | exp . OR exp
   32    | exp . GT exp
   33    | exp . LT exp
   34    | exp . GTE exp
   35    | exp . LTE exp
   36    | exp . EQ exp
   37    | exp . NEQ exp

    ADD  shift, and go to state 87
    SUB  shift, and go to state 88
    MUL  shift, and go to state 89
    DIV  shift, and go to state 90
    MOD  shift, and go to state 91
    AND  shift, and go to state 92
    OR   shift, and go to state 93
    GT   shift, and go to state 94
    LT   shift, and go to state 95
    EQ   shift, and go to state 96
    NEQ  shift, and go to state 97
    GTE  shift, and go to state 98
    LTE  shift, and go to state 99

    $default  reduce using rule 20 (exp_list)


state 138

   50 type: ARRAY LSQ int DOTDOT int RSQ OF . stdtype

    TINT   shift, and go to state 28
    TREAL  shift, and go to state 29

    stdtype  go to state 141


state 139

    6 sub: FUNCTION id LP params RP COLON stdtype declares program_body . SEMICOLON

    SEMICOLON  shift, and go to state 142


state 140

   15 stmt: IF exp THEN stmt ELSE stmt .

    $default  reduce using rule 15 (stmt)


state 141

   50 type: ARRAY LSQ int DOTDOT int RSQ OF stdtype .

    $default  reduce using rule 50 (type)


state 142

    6 sub: FUNCTION id LP params RP COLON stdtype declares program_body SEMICOLON .

    $default  reduce using rule 6 (sub)

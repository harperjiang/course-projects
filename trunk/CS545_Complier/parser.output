Grammar

    0 $accept: program $end

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body DOT

    2 declares: declares VAR id_list COLON type SEMICOLON
    3         | /* empty */

    4 subs: subs sub
    5     | /* empty */

    6 sub: FUNCTION id LP params RP COLON stdtype declares program_body SEMICOLON
    7    | PROCEDURE id LP params RP declares program_body SEMICOLON

    8 params: params SEMICOLON id_list COLON type
    9       | id_list COLON type

   10 program_body: BGIN stmts END

   11 stmts: stmt SEMICOLON stmts
   12      | stmt
   13      | /* empty */

   14 stmt: var ASSIGN exp
   15     | call
   16     | IF exp THEN stmt ELSE stmt
   17     | IF exp THEN stmt
   18     | WHILE exp DO stmt
   19     | BGIN stmts END
   20     | BREAK

   21 exp_list: exp_list COMMA exp
   22         | exp

   23 exp: exp ADD exp
   24    | exp SUB exp
   25    | SUB exp
   26    | exp MUL exp
   27    | exp DIV exp
   28    | exp MOD exp
   29    | LP exp RP
   30    | exp AND exp
   31    | exp OR exp
   32    | NOT exp
   33    | exp GT exp
   34    | exp LT exp
   35    | exp GTE exp
   36    | exp LTE exp
   37    | exp EQ exp
   38    | exp NEQ exp
   39    | call
   40    | id
   41    | num
   42    | boolexp

   43 call: syscall
   44     | usercall

   45 syscall: READ LP RP
   46        | WRITE LP exp_list RP

   47 usercall: id LP exp_list RP

   48 var: id
   49    | id LSQ exp RSQ

   50 type: stdtype
   51     | ARRAY LSQ int DOTDOT int RSQ OF stdtype

   52 stdtype: TREAL
   53        | TINT

   54 id_list: id_list COMMA id
   55        | id

   56 boolexp: TRUE
   57        | FALSE

   58 id: ID

   59 num: int
   60    | REAL

   61 int: INT


Terminals, with rules where they appear

$end (0) 0
error (256)
PROGRAM (258) 1
FUNCTION (259) 6
PROCEDURE (260) 7
VAR (261) 2
IF (262) 16 17
ELSE (263) 16
THEN (264) 16 17
WHILE (265) 18
DO (266) 18
BGIN (267) 10 19
END (268) 10 19
SEMICOLON (269) 1 2 6 7 8 11
COMMA (270) 21 54
COLON (271) 2 6 8 9
DOT (272) 1
DOTDOT (273) 51
LP (274) 1 6 7 29 45 46 47
RP (275) 1 6 7 29 45 46 47
LSQ (276) 49 51
RSQ (277) 49 51
READ (278) 45
WRITE (279) 46
ARRAY (280) 51
TINT (281) 53
TREAL (282) 52
OF (283) 51
ASSIGN (284) 14
ADD (285) 23
SUB (286) 24 25
MUL (287) 26
DIV (288) 27
MOD (289) 28
AND (290) 30
OR (291) 31
NOT (292) 32
GT (293) 33
LT (294) 34
EQ (295) 37
NEQ (296) 38
GTE (297) 35
LTE (298) 36
INT (299) 61
REAL (300) 60
ID (301) 58
TRUE (302) 56
FALSE (303) 57
BREAK (304) 20
UMINUS (305)


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1, on right: 0
declares (53)
    on left: 2 3, on right: 1 2 6 7
subs (54)
    on left: 4 5, on right: 1 4
sub (55)
    on left: 6 7, on right: 4
params (56)
    on left: 8 9, on right: 6 7 8
program_body (57)
    on left: 10, on right: 1 6 7
stmts (58)
    on left: 11 12 13, on right: 10 11 19
stmt (59)
    on left: 14 15 16 17 18 19 20, on right: 11 12 16 17 18
exp_list (60)
    on left: 21 22, on right: 21 46 47
exp (61)
    on left: 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
    41 42, on right: 14 16 17 18 21 22 23 24 25 26 27 28 29 30 31 32
    33 34 35 36 37 38 49
call (62)
    on left: 43 44, on right: 15 39
syscall (63)
    on left: 45 46, on right: 43
usercall (64)
    on left: 47, on right: 44
var (65)
    on left: 48 49, on right: 14
type (66)
    on left: 50 51, on right: 2 8 9
stdtype (67)
    on left: 52 53, on right: 6 50 51
id_list (68)
    on left: 54 55, on right: 1 2 8 9 54
boolexp (69)
    on left: 56 57, on right: 42
id (70)
    on left: 58, on right: 1 6 7 40 47 48 49 54 55
num (71)
    on left: 59 60, on right: 41
int (72)
    on left: 61, on right: 51 59


state 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


state 1

    1 program: PROGRAM . id LP id_list RP SEMICOLON declares subs program_body DOT

    ID  shift, and go to state 3

    id  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

   58 id: ID .

    $default  reduce using rule 58 (id)


state 4

    1 program: PROGRAM id . LP id_list RP SEMICOLON declares subs program_body DOT

    LP  shift, and go to state 6


state 5

    0 $accept: program $end .

    $default  accept


state 6

    1 program: PROGRAM id LP . id_list RP SEMICOLON declares subs program_body DOT

    ID  shift, and go to state 3

    id_list  go to state 7
    id       go to state 8


state 7

    1 program: PROGRAM id LP id_list . RP SEMICOLON declares subs program_body DOT
   54 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    RP     shift, and go to state 10


state 8

   55 id_list: id .

    $default  reduce using rule 55 (id_list)


state 9

   54 id_list: id_list COMMA . id

    ID  shift, and go to state 3

    id  go to state 11


state 10

    1 program: PROGRAM id LP id_list RP . SEMICOLON declares subs program_body DOT

    SEMICOLON  shift, and go to state 12


state 11

   54 id_list: id_list COMMA id .

    $default  reduce using rule 54 (id_list)


state 12

    1 program: PROGRAM id LP id_list RP SEMICOLON . declares subs program_body DOT

    $default  reduce using rule 3 (declares)

    declares  go to state 13


state 13

    1 program: PROGRAM id LP id_list RP SEMICOLON declares . subs program_body DOT
    2 declares: declares . VAR id_list COLON type SEMICOLON

    VAR  shift, and go to state 14

    $default  reduce using rule 5 (subs)

    subs  go to state 15


state 14

    2 declares: declares VAR . id_list COLON type SEMICOLON

    ID  shift, and go to state 3

    id_list  go to state 16
    id       go to state 8


state 15

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs . program_body DOT
    4 subs: subs . sub

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BGIN       shift, and go to state 19

    sub           go to state 20
    program_body  go to state 21


state 16

    2 declares: declares VAR id_list . COLON type SEMICOLON
   54 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 22


state 17

    6 sub: FUNCTION . id LP params RP COLON stdtype declares program_body SEMICOLON

    ID  shift, and go to state 3

    id  go to state 23


state 18

    7 sub: PROCEDURE . id LP params RP declares program_body SEMICOLON

    ID  shift, and go to state 3

    id  go to state 24


state 19

   10 program_body: BGIN . stmts END

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    $default  reduce using rule 13 (stmts)

    stmts     go to state 31
    stmt      go to state 32
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 20

    4 subs: subs sub .

    $default  reduce using rule 4 (subs)


state 21

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body . DOT

    DOT  shift, and go to state 38


state 22

    2 declares: declares VAR id_list COLON . type SEMICOLON

    ARRAY  shift, and go to state 39
    TINT   shift, and go to state 40
    TREAL  shift, and go to state 41

    type     go to state 42
    stdtype  go to state 43


state 23

    6 sub: FUNCTION id . LP params RP COLON stdtype declares program_body SEMICOLON

    LP  shift, and go to state 44


state 24

    7 sub: PROCEDURE id . LP params RP declares program_body SEMICOLON

    LP  shift, and go to state 45


state 25

   16 stmt: IF . exp THEN stmt ELSE stmt
   17     | IF . exp THEN stmt

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 53
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 26

   18 stmt: WHILE . exp DO stmt

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 59
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 27

   19 stmt: BGIN . stmts END

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    $default  reduce using rule 13 (stmts)

    stmts     go to state 60
    stmt      go to state 32
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 28

   45 syscall: READ . LP RP

    LP  shift, and go to state 61


state 29

   46 syscall: WRITE . LP exp_list RP

    LP  shift, and go to state 62


state 30

   20 stmt: BREAK .

    $default  reduce using rule 20 (stmt)


state 31

   10 program_body: BGIN stmts . END

    END  shift, and go to state 63


state 32

   11 stmts: stmt . SEMICOLON stmts
   12      | stmt .

    SEMICOLON  shift, and go to state 64

    $default  reduce using rule 12 (stmts)


state 33

   15 stmt: call .

    $default  reduce using rule 15 (stmt)


state 34

   43 call: syscall .

    $default  reduce using rule 43 (call)


state 35

   44 call: usercall .

    $default  reduce using rule 44 (call)


state 36

   14 stmt: var . ASSIGN exp

    ASSIGN  shift, and go to state 65


state 37

   47 usercall: id . LP exp_list RP
   48 var: id .
   49    | id . LSQ exp RSQ

    LP   shift, and go to state 66
    LSQ  shift, and go to state 67

    $default  reduce using rule 48 (var)


state 38

    1 program: PROGRAM id LP id_list RP SEMICOLON declares subs program_body DOT .

    $default  reduce using rule 1 (program)


state 39

   51 type: ARRAY . LSQ int DOTDOT int RSQ OF stdtype

    LSQ  shift, and go to state 68


state 40

   53 stdtype: TINT .

    $default  reduce using rule 53 (stdtype)


state 41

   52 stdtype: TREAL .

    $default  reduce using rule 52 (stdtype)


state 42

    2 declares: declares VAR id_list COLON type . SEMICOLON

    SEMICOLON  shift, and go to state 69


state 43

   50 type: stdtype .

    $default  reduce using rule 50 (type)


state 44

    6 sub: FUNCTION id LP . params RP COLON stdtype declares program_body SEMICOLON

    ID  shift, and go to state 3

    params   go to state 70
    id_list  go to state 71
    id       go to state 8


state 45

    7 sub: PROCEDURE id LP . params RP declares program_body SEMICOLON

    ID  shift, and go to state 3

    params   go to state 72
    id_list  go to state 71
    id       go to state 8


state 46

   29 exp: LP . exp RP

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 73
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 47

   25 exp: SUB . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 74
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 48

   32 exp: NOT . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 75
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 49

   61 int: INT .

    $default  reduce using rule 61 (int)


state 50

   60 num: REAL .

    $default  reduce using rule 60 (num)


state 51

   56 boolexp: TRUE .

    $default  reduce using rule 56 (boolexp)


state 52

   57 boolexp: FALSE .

    $default  reduce using rule 57 (boolexp)


state 53

   16 stmt: IF exp . THEN stmt ELSE stmt
   17     | IF exp . THEN stmt
   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    THEN  shift, and go to state 76
    ADD   shift, and go to state 77
    SUB   shift, and go to state 78
    MUL   shift, and go to state 79
    DIV   shift, and go to state 80
    MOD   shift, and go to state 81
    AND   shift, and go to state 82
    OR    shift, and go to state 83
    GT    shift, and go to state 84
    LT    shift, and go to state 85
    EQ    shift, and go to state 86
    NEQ   shift, and go to state 87
    GTE   shift, and go to state 88
    LTE   shift, and go to state 89


state 54

   39 exp: call .

    $default  reduce using rule 39 (exp)


state 55

   42 exp: boolexp .

    $default  reduce using rule 42 (exp)


state 56

   40 exp: id .
   47 usercall: id . LP exp_list RP

    LP  shift, and go to state 66

    $default  reduce using rule 40 (exp)


state 57

   41 exp: num .

    $default  reduce using rule 41 (exp)


state 58

   59 num: int .

    $default  reduce using rule 59 (num)


state 59

   18 stmt: WHILE exp . DO stmt
   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    DO   shift, and go to state 90
    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81
    AND  shift, and go to state 82
    OR   shift, and go to state 83
    GT   shift, and go to state 84
    LT   shift, and go to state 85
    EQ   shift, and go to state 86
    NEQ  shift, and go to state 87
    GTE  shift, and go to state 88
    LTE  shift, and go to state 89


state 60

   19 stmt: BGIN stmts . END

    END  shift, and go to state 91


state 61

   45 syscall: READ LP . RP

    RP  shift, and go to state 92


state 62

   46 syscall: WRITE LP . exp_list RP

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp_list  go to state 93
    exp       go to state 94
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 63

   10 program_body: BGIN stmts END .

    $default  reduce using rule 10 (program_body)


state 64

   11 stmts: stmt SEMICOLON . stmts

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    $default  reduce using rule 13 (stmts)

    stmts     go to state 95
    stmt      go to state 32
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 65

   14 stmt: var ASSIGN . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 96
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 66

   47 usercall: id LP . exp_list RP

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp_list  go to state 97
    exp       go to state 94
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 67

   49 var: id LSQ . exp RSQ

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 98
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 68

   51 type: ARRAY LSQ . int DOTDOT int RSQ OF stdtype

    INT  shift, and go to state 49

    int  go to state 99


state 69

    2 declares: declares VAR id_list COLON type SEMICOLON .

    $default  reduce using rule 2 (declares)


state 70

    6 sub: FUNCTION id LP params . RP COLON stdtype declares program_body SEMICOLON
    8 params: params . SEMICOLON id_list COLON type

    SEMICOLON  shift, and go to state 100
    RP         shift, and go to state 101


state 71

    9 params: id_list . COLON type
   54 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 102


state 72

    7 sub: PROCEDURE id LP params . RP declares program_body SEMICOLON
    8 params: params . SEMICOLON id_list COLON type

    SEMICOLON  shift, and go to state 100
    RP         shift, and go to state 103


state 73

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   29    | LP exp . RP
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    RP   shift, and go to state 104
    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81
    AND  shift, and go to state 82
    OR   shift, and go to state 83
    GT   shift, and go to state 84
    LT   shift, and go to state 85
    EQ   shift, and go to state 86
    NEQ  shift, and go to state 87
    GTE  shift, and go to state 88
    LTE  shift, and go to state 89


state 74

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   25    | SUB exp .
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    $default  reduce using rule 25 (exp)


state 75

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   32    | NOT exp .
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81
    GT   shift, and go to state 84
    LT   shift, and go to state 85
    EQ   shift, and go to state 86
    NEQ  shift, and go to state 87
    GTE  shift, and go to state 88
    LTE  shift, and go to state 89

    $default  reduce using rule 32 (exp)


state 76

   16 stmt: IF exp THEN . stmt ELSE stmt
   17     | IF exp THEN . stmt

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    stmt      go to state 105
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 77

   23 exp: exp ADD . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 106
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 78

   24 exp: exp SUB . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 107
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 79

   26 exp: exp MUL . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 108
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 80

   27 exp: exp DIV . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 109
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 81

   28 exp: exp MOD . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 110
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 82

   30 exp: exp AND . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 111
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 83

   31 exp: exp OR . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 112
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 84

   33 exp: exp GT . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 113
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 85

   34 exp: exp LT . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 114
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 86

   37 exp: exp EQ . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 115
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 87

   38 exp: exp NEQ . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 116
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 88

   35 exp: exp GTE . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 117
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 89

   36 exp: exp LTE . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 118
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 90

   18 stmt: WHILE exp DO . stmt

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    stmt      go to state 119
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 91

   19 stmt: BGIN stmts END .

    $default  reduce using rule 19 (stmt)


state 92

   45 syscall: READ LP RP .

    $default  reduce using rule 45 (syscall)


state 93

   21 exp_list: exp_list . COMMA exp
   46 syscall: WRITE LP exp_list . RP

    COMMA  shift, and go to state 120
    RP     shift, and go to state 121


state 94

   22 exp_list: exp .
   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81
    AND  shift, and go to state 82
    OR   shift, and go to state 83
    GT   shift, and go to state 84
    LT   shift, and go to state 85
    EQ   shift, and go to state 86
    NEQ  shift, and go to state 87
    GTE  shift, and go to state 88
    LTE  shift, and go to state 89

    $default  reduce using rule 22 (exp_list)


state 95

   11 stmts: stmt SEMICOLON stmts .

    $default  reduce using rule 11 (stmts)


state 96

   14 stmt: var ASSIGN exp .
   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81
    AND  shift, and go to state 82
    OR   shift, and go to state 83
    GT   shift, and go to state 84
    LT   shift, and go to state 85
    EQ   shift, and go to state 86
    NEQ  shift, and go to state 87
    GTE  shift, and go to state 88
    LTE  shift, and go to state 89

    $default  reduce using rule 14 (stmt)


state 97

   21 exp_list: exp_list . COMMA exp
   47 usercall: id LP exp_list . RP

    COMMA  shift, and go to state 120
    RP     shift, and go to state 122


state 98

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp
   49 var: id LSQ exp . RSQ

    RSQ  shift, and go to state 123
    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81
    AND  shift, and go to state 82
    OR   shift, and go to state 83
    GT   shift, and go to state 84
    LT   shift, and go to state 85
    EQ   shift, and go to state 86
    NEQ  shift, and go to state 87
    GTE  shift, and go to state 88
    LTE  shift, and go to state 89


state 99

   51 type: ARRAY LSQ int . DOTDOT int RSQ OF stdtype

    DOTDOT  shift, and go to state 124


state 100

    8 params: params SEMICOLON . id_list COLON type

    ID  shift, and go to state 3

    id_list  go to state 125
    id       go to state 8


state 101

    6 sub: FUNCTION id LP params RP . COLON stdtype declares program_body SEMICOLON

    COLON  shift, and go to state 126


state 102

    9 params: id_list COLON . type

    ARRAY  shift, and go to state 39
    TINT   shift, and go to state 40
    TREAL  shift, and go to state 41

    type     go to state 127
    stdtype  go to state 43


state 103

    7 sub: PROCEDURE id LP params RP . declares program_body SEMICOLON

    $default  reduce using rule 3 (declares)

    declares  go to state 128


state 104

   29 exp: LP exp RP .

    $default  reduce using rule 29 (exp)


state 105

   16 stmt: IF exp THEN stmt . ELSE stmt
   17     | IF exp THEN stmt .

    ELSE  shift, and go to state 129

    $default  reduce using rule 17 (stmt)


state 106

   23 exp: exp . ADD exp
   23    | exp ADD exp .
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 23 (exp)


state 107

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   24    | exp SUB exp .
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 24 (exp)


state 108

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   26    | exp MUL exp .
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    $default  reduce using rule 26 (exp)


state 109

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   27    | exp DIV exp .
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    $default  reduce using rule 27 (exp)


state 110

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   28    | exp MOD exp .
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    $default  reduce using rule 28 (exp)


state 111

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   30    | exp AND exp .
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81
    GT   shift, and go to state 84
    LT   shift, and go to state 85
    EQ   shift, and go to state 86
    NEQ  shift, and go to state 87
    GTE  shift, and go to state 88
    LTE  shift, and go to state 89

    $default  reduce using rule 30 (exp)


state 112

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   31    | exp OR exp .
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81
    GT   shift, and go to state 84
    LT   shift, and go to state 85
    EQ   shift, and go to state 86
    NEQ  shift, and go to state 87
    GTE  shift, and go to state 88
    LTE  shift, and go to state 89

    $default  reduce using rule 31 (exp)


state 113

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   33    | exp GT exp .
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 33 (exp)


state 114

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   34    | exp LT exp .
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 34 (exp)


state 115

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   37    | exp EQ exp .
   38    | exp . NEQ exp

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 37 (exp)


state 116

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp
   38    | exp NEQ exp .

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 38 (exp)


state 117

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   35    | exp GTE exp .
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 35 (exp)


state 118

   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   36    | exp LTE exp .
   37    | exp . EQ exp
   38    | exp . NEQ exp

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81

    $default  reduce using rule 36 (exp)


state 119

   18 stmt: WHILE exp DO stmt .

    $default  reduce using rule 18 (stmt)


state 120

   21 exp_list: exp_list COMMA . exp

    LP     shift, and go to state 46
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    SUB    shift, and go to state 47
    NOT    shift, and go to state 48
    INT    shift, and go to state 49
    REAL   shift, and go to state 50
    ID     shift, and go to state 3
    TRUE   shift, and go to state 51
    FALSE  shift, and go to state 52

    exp       go to state 130
    call      go to state 54
    syscall   go to state 34
    usercall  go to state 35
    boolexp   go to state 55
    id        go to state 56
    num       go to state 57
    int       go to state 58


state 121

   46 syscall: WRITE LP exp_list RP .

    $default  reduce using rule 46 (syscall)


state 122

   47 usercall: id LP exp_list RP .

    $default  reduce using rule 47 (usercall)


state 123

   49 var: id LSQ exp RSQ .

    $default  reduce using rule 49 (var)


state 124

   51 type: ARRAY LSQ int DOTDOT . int RSQ OF stdtype

    INT  shift, and go to state 49

    int  go to state 131


state 125

    8 params: params SEMICOLON id_list . COLON type
   54 id_list: id_list . COMMA id

    COMMA  shift, and go to state 9
    COLON  shift, and go to state 132


state 126

    6 sub: FUNCTION id LP params RP COLON . stdtype declares program_body SEMICOLON

    TINT   shift, and go to state 40
    TREAL  shift, and go to state 41

    stdtype  go to state 133


state 127

    9 params: id_list COLON type .

    $default  reduce using rule 9 (params)


state 128

    2 declares: declares . VAR id_list COLON type SEMICOLON
    7 sub: PROCEDURE id LP params RP declares . program_body SEMICOLON

    VAR   shift, and go to state 14
    BGIN  shift, and go to state 19

    program_body  go to state 134


state 129

   16 stmt: IF exp THEN stmt ELSE . stmt

    IF     shift, and go to state 25
    WHILE  shift, and go to state 26
    BGIN   shift, and go to state 27
    READ   shift, and go to state 28
    WRITE  shift, and go to state 29
    ID     shift, and go to state 3
    BREAK  shift, and go to state 30

    stmt      go to state 135
    call      go to state 33
    syscall   go to state 34
    usercall  go to state 35
    var       go to state 36
    id        go to state 37


state 130

   21 exp_list: exp_list COMMA exp .
   23 exp: exp . ADD exp
   24    | exp . SUB exp
   26    | exp . MUL exp
   27    | exp . DIV exp
   28    | exp . MOD exp
   30    | exp . AND exp
   31    | exp . OR exp
   33    | exp . GT exp
   34    | exp . LT exp
   35    | exp . GTE exp
   36    | exp . LTE exp
   37    | exp . EQ exp
   38    | exp . NEQ exp

    ADD  shift, and go to state 77
    SUB  shift, and go to state 78
    MUL  shift, and go to state 79
    DIV  shift, and go to state 80
    MOD  shift, and go to state 81
    AND  shift, and go to state 82
    OR   shift, and go to state 83
    GT   shift, and go to state 84
    LT   shift, and go to state 85
    EQ   shift, and go to state 86
    NEQ  shift, and go to state 87
    GTE  shift, and go to state 88
    LTE  shift, and go to state 89

    $default  reduce using rule 21 (exp_list)


state 131

   51 type: ARRAY LSQ int DOTDOT int . RSQ OF stdtype

    RSQ  shift, and go to state 136


state 132

    8 params: params SEMICOLON id_list COLON . type

    ARRAY  shift, and go to state 39
    TINT   shift, and go to state 40
    TREAL  shift, and go to state 41

    type     go to state 137
    stdtype  go to state 43


state 133

    6 sub: FUNCTION id LP params RP COLON stdtype . declares program_body SEMICOLON

    $default  reduce using rule 3 (declares)

    declares  go to state 138


state 134

    7 sub: PROCEDURE id LP params RP declares program_body . SEMICOLON

    SEMICOLON  shift, and go to state 139


state 135

   16 stmt: IF exp THEN stmt ELSE stmt .

    $default  reduce using rule 16 (stmt)


state 136

   51 type: ARRAY LSQ int DOTDOT int RSQ . OF stdtype

    OF  shift, and go to state 140


state 137

    8 params: params SEMICOLON id_list COLON type .

    $default  reduce using rule 8 (params)


state 138

    2 declares: declares . VAR id_list COLON type SEMICOLON
    6 sub: FUNCTION id LP params RP COLON stdtype declares . program_body SEMICOLON

    VAR   shift, and go to state 14
    BGIN  shift, and go to state 19

    program_body  go to state 141


state 139

    7 sub: PROCEDURE id LP params RP declares program_body SEMICOLON .

    $default  reduce using rule 7 (sub)


state 140

   51 type: ARRAY LSQ int DOTDOT int RSQ OF . stdtype

    TINT   shift, and go to state 40
    TREAL  shift, and go to state 41

    stdtype  go to state 142


state 141

    6 sub: FUNCTION id LP params RP COLON stdtype declares program_body . SEMICOLON

    SEMICOLON  shift, and go to state 143


state 142

   51 type: ARRAY LSQ int DOTDOT int RSQ OF stdtype .

    $default  reduce using rule 51 (type)


state 143

    6 sub: FUNCTION id LP params RP COLON stdtype declares program_body SEMICOLON .

    $default  reduce using rule 6 (sub)
